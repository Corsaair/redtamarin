#!/bin/sh
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is [Open Source Virtual Machine].
#
# The Initial Developer of the Original Code is
# Adobe System Incorporated.
# Portions created by the Initial Developer are Copyright (C) 2007
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Adobe AS3 Team
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

echo `pwd`
file="../platform/win32/obj_9/shell/Release/avmplus.map"
#file="../objdir-release/shell/avmshell.map"
test "$1" = "" || {
  file=$1
}


grep -e '^ 0001:00......   ' -e '^ 0002:00......   ' -e '^ 0003:00......   ' <$file |
	sed -e's/^ 0001:00/1/' -e 's/^ 0002:00/2/' -e 's/^ 0003:00/3/' | 
	tee x |
	awk '{ print $3, $0 }' |
	sort |
	awk ' 
		{ 
			addr=strtonum("0x" $1) 
			if (saveaddr > 0 && addr > saveaddr) {
			   size = addr-saveaddr
			   # print per-function size
			   #print size, file, addr, saveaddr, $1
			   filetotal[file] += size
			   if (size < 100000)
			   	total += size
			} 
			file=$NF
			saveaddr=addr
		}
		END {

			# read the module definitions
			while (getline <"modules.txt" > 0) {
				if (NF > 0) {
					mod = $1
					if ($3 == "*")
						for (n in filetotal) { if (index(n,$2)==1) map[n] = mod }
					else
						map[$2] = mod
				}
			}

			# group files into modules
			for(n in map) {
				mod = map[n]
				filetotal[mod] += filetotal[n]
				delete filetotal[n]
			}

			# print per-module size
			printf "%-7d %-12s 100.0%\n",total,"total"
			for (f in filetotal) {
                                if (filetotal[f]>0)
				printf("%-7d %-12s %.1f%%\n",filetotal[f], f, 100*(filetotal[f]/total))
			}
		}
		' | sort -rn
test -f x && rm x