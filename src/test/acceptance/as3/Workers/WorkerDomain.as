/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1/GPL 2.0/LGPL 2.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is [Open Source Virtual Machine.]. * * The Initial Developer of the Original Code is * Adobe System Incorporated. * Portions created by the Initial Developer are Copyright (C) 2012 * the Initial Developer. All Rights Reserved. * * Contributor(s): *   Adobe AS3 Team * * Alternatively, the contents of this file may be used under the terms of * either the GNU General Public License Version 2 or later (the "GPL"), or * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"), * in which case the provisions of the GPL or the LGPL are applicable instead * of those above. If you wish to allow use of your version of this file only * under the terms of either the GPL or the LGPL, and not to allow others to * use your version of this file under the terms of the MPL, indicate your * decision by deleting the provisions above and replace them with the notice * and other provisions required by the GPL or the LGPL. If you do not delete * the provisions above, a recipient may use your version of this file under * the terms of any one of the MPL, the GPL or the LGPL. * * ***** END LICENSE BLOCK ***** */  package {        /*Changing to convert to as4 file*/    import com.adobe.test.Assert;    import flash.system.Worker;    import flash.system.WorkerDomain;    import avmplus.System;    if (Worker.current.isPrimordial) {        //var SECTION = "Workers";        //var VERSION = "as3";        //var TITLE   = "WorkerDomain api tests";               var wd:WorkerDomain=null;        var exception:String="";    // test WorkerDomain constructor throws exception        try {            wd=new WorkerDomain();        } catch (e) {            exception=e.toString();        }        //AddTestCase("test new WorkerDomain constructor does throws an exception","ArgumentError: Error #2012",exception.substring(0,"ArgumentError: Error #2012".length));        //AddTestCase("test new WorkerDomain is null",true,wd==null);        Assert.expectEq("test new WorkerDomain constructor does not throw an exception","",exception);        Assert.expectEq("test new WorkerDomain is not null",true,wd!=null);        try {            wd=WorkerDomain(WorkerDomain.current);        } catch (e) {            exception=e.toString();        }        Assert.expectEq("test WorkerDomain constructor does not throw an exception","",exception);        Assert.expectEq("test WorkerDomain constructor is not null",true,wd!=null);        var lw:Vector.<Worker>=null;        lw=WorkerDomain.current.listWorkers();//    trace("listWorker="+lw);        Assert.expectEq("test WorkerDomain listWorkers has length>=1",true,lw.length>=1);        var worker:Worker=null;        try {            worker=WorkerDomain.current.createWorkerFromByteArray(null);        } catch(e) {            exception=e.toString();        }        //AddTestCase("test createWorker(null) throws an exception","TypeError: Error #2007",exception.substring(0,"TypeError: Error #2007".length));        //AddTestCase("test createWorker(null) does not create a worker",null,worker);        Assert.expectEq("test createWorker(null) throws does not thrown an exception","",exception);        Assert.expectEq("test createWorker(null) creates a worker",true,worker!=null);        var count:uint=WorkerDomain.current.listWorkers().length;        worker=WorkerDomain.current.createWorkerFromPrimordial();        Assert.expectEq("test createWorker(loaderInfo.bytes) successfully creates a worker",worker!=null,true);        worker.start();//        System.sleep(50);//        AddTestCase("test WorkerDomain listWorkers contains an additional element after createWorker",count+1,WorkerDomain.current.listWorkers().length);        worker.terminate();        Assert.expectEq("test WorkerDomain listWorkers contains one less after terminate",count,WorkerDomain.current.listWorkers().length);        //test();    } else {        trace("in background worker");    }}