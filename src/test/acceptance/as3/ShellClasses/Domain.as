/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2005-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package {
    import avmplus.Domain
    import flash.utils.ByteArray

    public class testclass1 {
        var desc="test class";
        public function testclass1(desc) {
            this.desc=desc;
        }
        public function toString() { 
            return desc;
        }
    }

    var data:Array=[0x10,0x00,0x2E,0x00,0x00,0x00,0x00,0x09,0x14,0x74,0x65,0x73,0x74,0x75,0x74,0x69,0x6C,0x73,0x3A,0x74,0x65,0x73,0x74,0x63,0x6C,0x61,0x73,0x73,0x32,0x00,0x04,0x64,0x65,0x73,0x63,0x0F,0x44,0x6F,0x6D,0x61,0x69,0x6E,0x55,0x74,0x69,0x6C,0x2E,0x61,0x73,0x24,0x31,0x09,0x74,0x65,0x73,0x74,0x75,0x74,0x69,0x6C,0x73,0x06,0x4F,0x62,0x6A,0x65,0x63,0x74,0x08,0x74,0x6F,0x53,0x74,0x72,0x69,0x6E,0x67,0x0A,0x74,0x65,0x73,0x74,0x63,0x6C,0x61,0x73,0x73,0x32,0x09,0x05,0x01,0x05,0x04,0x16,0x02,0x16,0x05,0x17,0x05,0x18,0x01,0x1A,0x01,0x1A,0x06,0x03,0x08,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x04,0x02,0x03,0x04,0x05,0x07,0x09,0x03,0x01,0x07,0x05,0x03,0x07,0x03,0x07,0x07,0x04,0x08,0x07,0x03,0x06,0x09,0x06,0x02,0x04,0x00,0x00,0x02,0x00,0x01,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x01,0x04,0x05,0x09,0x06,0x00,0x01,0x02,0x02,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x02,0x00,0x00,0x01,0x03,0x01,0x04,0x04,0x01,0x00,0x04,0x00,0x01,0x01,0x03,0x04,0x03,0xD0,0x30,0x47,0x00,0x00,0x01,0x02,0x02,0x04,0x05,0x0A,0xD0,0x30,0xD0,0x49,0x00,0xD0,0xD1,0x68,0x01,0x47,0x00,0x00,0x02,0x01,0x01,0x04,0x05,0x06,0xD0,0x30,0xD0,0x66,0x01,0x48,0x00,0x00,0x03,0x02,0x01,0x01,0x03,0x13,0xD0,0x30,0x65,0x00,0x5D,0x05,0x66,0x05,0x30,0x5D,0x06,0x66,0x06,0x58,0x00,0x1D,0x68,0x04,0x47,0x00,0x00];

    function writeDataFile() {
        var ba=new ByteArray;
        for (n in data) {
            ba.writeByte(data[n]);
	}
        ba.writeFile("testclass.abc");
    }


    var SECTION = "domain";
    var VERSION = "as3";
    startTest();
    var TITLE   = "test the Domain class";

    writeHeaderToLog( SECTION + " "+ TITLE );

    AddTestCase("Domain currentDomain static getter is not null",
      true,
      Domain.currentDomain!=null);

    AddTestCase("Domain constructor is not null",
      true,
      new Domain(Domain.currentDomain)!=null);

    var domain=Domain.currentDomain;
    var cl:Class=domain.getClass("testclass1");
    AddTestCase("Domain getClass returns correct class",
      testclass1,
      cl);

    var tc1:testclass1=new cl("test class");
    AddTestCase("Domain getClass class can be constructed",
      "test class",
      tc1.toString());

    var err1;
    try {
        domain.load("unknown.abc");
    } catch (e) {
        err1=e.toString();
    }
   
    AddTestCase("Domain load non existant file",
      "Error: Error #1500",
      err1.substring(0,18));

    var err2;
    try {
       domain.load("DomainUtil.as");
    } catch(e) {
       err2=e.toString();
    }

    writeDataFile();
    domain.load("testclass.abc");
    var cl2=domain.getClass("testutils.testclass2");
    var tc2=new cl2("test class2");
    AddTestCase("Domain load filename, construct object",
      "test class2",
      tc2.toString());

    test();

}