# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is [Open Source Virtual Machine.].
#
# The Initial Developer of the Original Code is
# Adobe System Incorporated.
# Portions created by the Initial Developer are Copyright (C) 2004-2006
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Adobe AS3 Team
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****


# Set this to yes if doing ARM skunkworks
ARM_SKUNKWORKS := YES

# Set this to yes for GNUARM
GNUARM := YES

# DEBUG can be set to YES to include debugging info, or NO otherwise
DEBUG := YES

CC     := arm-elf-gcc
CXX    := arm-elf-g++
AR     := arm-elf-ar
RANLIB := arm-elf-ranlib

UNAME  := $(shell uname)

ifeq ($(UNAME),Linux)
	PLATFORM_DEFS := -DAVMPLUS_UNIX -DSOFT_ASSERTS -DDEBUGGER -DAVMPLUS_IA32 -D_DEBUG -DDEBUG -DCYGWIN -DAVMPLUS_IA32
endif

ifeq ($(UNAME),Darwin)
   PLATFORM_DEFS := -DDARWIN -D_MAC -Dpowerc -DSOFT_ASSERTS -DAVMPLUS_PPC -DDEBUGGER -DTARGET_RT_MAC_MACHO=1 -D_DEBUG -DDEBUG
endif

ifeq ($(UNAME),CYGWIN_NT-5.1)
   PLATFORM_DEFS := -DCYGWIN -DAVMPLUS_IA32
endif

ifeq (YES, ${ARM_SKUNKWORKS})
  ifeq (YES, ${GNUARM})
    SOFT_FLOAT :=
    USE_MMAP   :=
  else
    SOFT_FLOAT := -msoft-float
    USE_MMAP   := -DUSE_MMAP
  endif
else
  SOFT_FLOAT :=
  USE_MMAP   := -DUSE_MMAP
endif

ifeq (YES, ${ARM_SKUNKWORKS})
  PLATFORM_DEFS := -DSOFT_ASSERTS -DMMGC_ARM -DAVMPLUS_ARM -DAVMPLUS_UCLINUX -DDEBUGGER -D_DEBUG -DDEBUG
endif

DEBUG_CFLAGS     := -g -MMD 
RELEASE_CFLAGS   := -O3 -MMD

DEBUG_CXXFLAGS := ${DEBUG_CFLAGS} -fno-rtti -fcheck-new ${SOFT_FLOAT} ${USE_MMAP}
RELEASE_CXXFLAGS := ${RELEASE_CFLAGS} -fno-rtti -fcheck-new ${SOFT_FLOAT} ${USE_MMAP}

ifeq (YES, ${DEBUG})
   CFLAGS       := ${DEBUG_CFLAGS}
   CXXFLAGS     := ${DEBUG_CXXFLAGS}
else
   CFLAGS       := ${RELEASE_CFLAGS}
   CXXFLAGS     := ${RELEASE_CXXFLAGS}
endif

#****************************************************************************
# Preprocessor directives
#****************************************************************************

DEFS := -DUNIX ${PLATFORM_DEFS} -DENABLE_PROFILER

CFLAGS   := ${CFLAGS} ${DEFS}
CXXFLAGS := ${CXXFLAGS} ${DEFS}

#****************************************************************************
# Include paths
#****************************************************************************

INCS := -I. -I../core -I../codegen

#****************************************************************************
# Targets of the build
#****************************************************************************

OUTPUT := libmmgc.a

all: ${OUTPUT}

#****************************************************************************
# Source files
#****************************************************************************

SRCS := GCObject.cpp \
	GCMemoryProfiler.cpp \
        GCLargeAlloc.cpp \
        GCHeapUnix.cpp \
        GCHeap.cpp \
	GCHashtable.cpp \
	GCDebugUnix.cpp \
        GCAllocObjectUnix.cpp \
        GCAllocBase.cpp \
        GCAlloc.cpp \
	GC.cpp \
	FixedMalloc.cpp \
	FixedAlloc.cpp

#****************************************************************************
# Output
#****************************************************************************

OBJS := $(addsuffix .o,$(basename ${SRCS}))

${OUTPUT}: ${OBJS}
	${AR} rcs $@ ${OBJS}
	${RANLIB} $@
	@echo "Done"

#****************************************************************************
# Dependencies
#****************************************************************************

# Create a lists of object and .d files to create -
# one for each source file in the directory
DEPS := $(addsufix .d,$(basename ${SRCS}))

# make any non-existent make files (using the g++ preprocessor)
${DEPS} : %.d : %.cpp
	${CXX} ${CXXFLAGS} ${INCS} -MM $< > $@

#****************************************************************************
# Rules
#****************************************************************************

# Rules for compiling source files to object files
%.o : %.cpp
	@echo "=== compiling:" $@ ${OPT}
	@${CXX} -c ${OPT} ${CXXFLAGS} ${INCS} $< -o $@

clean:
	-rm -f core* ${OBJS} ${OUTPUT} ${DEPS} log outputdebug.txt

ifneq (${MAKECMDGOALS},clean)
ifneq (${UNAME},Linux)
include ${DEPS} # include the generated make files, which make the object files
endif
endif
