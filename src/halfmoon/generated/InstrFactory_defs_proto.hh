///
/// generated by templates.py -- do not edit
///

/// High level intermediate representation (HR) opcodes
///
enum InstrKind {
  HR_start,                 // StartInstr 
  HR_template,              // StartInstr 
  HR_catchblock,            // CatchBlockInstr 
  HR_return,                // StopInstr 
  HR_throw,                 // StopInstr 
  HR_goto,                  // GotoInstr 
  HR_label,                 // LabelInstr 
  HR_if,                    // IfInstr 
  HR_switch,                // SwitchInstr 
  HR_arm,                   // ArmInstr 
  HR_const,                 // ConstantExpr 
  HR_coerce,                // BinaryStmt 
  HR_cast,                  // BinaryStmt 
  HR_castobject,            // UnaryExpr 
  HR_tonumber,              // UnaryStmt 
  HR_toint,                 // UnaryStmt 
  HR_touint,                // UnaryStmt 
  HR_toboolean,             // UnaryExpr 
  HR_d2b,                   // UnaryExpr 
  HR_caststring,            // UnaryStmt 
  HR_castns,                // UnaryStmt 
  HR_cknull,                // UnaryStmt 
  HR_cknullobject,          // UnaryStmt 
  HR_cktimeout,             // UnaryStmt 
  HR_abc_hasnext,           // BinaryStmt 
  HR_abc_hasnext2,          // Hasnext2Stmt 
  HR_never,                 // ConstantExpr 
  HR_call,                  // CallStmt2 
  HR_construct,             // CallStmt2 
  HR_constructsuper,        // CallStmt2 
  HR_loadenv_namespace,     // BinaryExpr 
  HR_loadenv_boolean,       // BinaryExpr 
  HR_loadenv_number,        // BinaryExpr 
  HR_loadenv_string,        // BinaryExpr 
  HR_loadenv_interface,     // BinaryExpr 
  HR_loadenv,               // BinaryExpr 
  HR_loadenv_atom,          // BinaryExpr 
  HR_loadinitenv,           // UnaryExpr 
  HR_loadsuperinitenv,      // UnaryExpr 
  HR_loadenv_env,           // BinaryExpr 
  HR_newobject,             // NaryStmt0 
  HR_newarray,              // NaryStmt0 
  HR_applytype,             // NaryStmt0 
  HR_newinstance,           // UnaryExpr 
  HR_abc_convert_s,         // UnaryStmt 
  HR_abc_esc_xelem,         // UnaryStmt 
  HR_abc_esc_xattr,         // UnaryStmt 
  HR_abc_typeof,            // UnaryExpr 
  HR_speculate_int,         // BinaryExpr 
  HR_speculate_number,      // BinaryExpr 
  HR_speculate_numeric,     // BinaryExpr 
  HR_speculate_string,      // BinaryExpr 
  HR_speculate_object,      // BinaryExpr 
  HR_speculate_array,       // BinaryExpr 
  HR_speculate_bool,        // BinaryExpr 
  HR_ckfilter,              // UnaryExpr 
  HR_abc_add,               // BinaryStmt 
  HR_addd,                  // BinaryExpr 
  HR_concat_strings,        // BinaryExpr 
  HR_abc_nextname,          // BinaryStmt 
  HR_abc_nextvalue,         // BinaryStmt 
  HR_lessthan,              // BinaryExpr 
  HR_lessequals,            // BinaryExpr 
  HR_greaterthan,           // BinaryExpr 
  HR_greaterequals,         // BinaryExpr 
  HR_abc_instanceof,        // BinaryStmt 
  HR_abc_istype,            // BinaryStmt 
  HR_abc_istypelate,        // BinaryStmt 
  HR_abc_astype,            // BinaryExpr 
  HR_abc_astypelate,        // BinaryStmt 
  HR_abc_in,                // BinaryStmt 
  HR_divd,                  // BinaryExpr 
  HR_modulo,                // BinaryExpr 
  HR_subd,                  // BinaryExpr 
  HR_muld,                  // BinaryExpr 
  HR_addi,                  // BinaryExpr 
  HR_subi,                  // BinaryExpr 
  HR_muli,                  // BinaryExpr 
  HR_ori,                   // BinaryExpr 
  HR_andi,                  // BinaryExpr 
  HR_xori,                  // BinaryExpr 
  HR_lshi,                  // BinaryExpr 
  HR_rshi,                  // BinaryExpr 
  HR_rshui,                 // BinaryExpr 
  HR_noti,                  // UnaryExpr 
  HR_negi,                  // UnaryExpr 
  HR_negd,                  // UnaryExpr 
  HR_not,                   // UnaryExpr 
  HR_newactivation,         // UnaryStmt 
  HR_abc_finddef,           // BinaryStmt 
  HR_abc_findpropstrict,    // NaryStmt3 
  HR_abc_findpropstrictx,   // NaryStmt4 
  HR_abc_findpropstrictns,  // NaryStmt4 
  HR_abc_findpropstrictnsx, // NaryStmt4 
  HR_abc_findproperty,      // NaryStmt3 
  HR_abc_findpropertyx,     // NaryStmt4 
  HR_abc_findpropertyns,    // NaryStmt4 
  HR_abc_findpropertynsx,   // NaryStmt4 
  HR_newclass,              // NaryStmt2 
  HR_newfunction,           // NaryStmt1 
  HR_abc_getsuper,          // CallStmt2 
  HR_abc_getsuperx,         // CallStmt3 
  HR_abc_getsuperns,        // CallStmt3 
  HR_abc_getsupernsx,       // CallStmt4 
  HR_abc_getdescendants,    // CallStmt2 
  HR_abc_getdescendantsx,   // CallStmt3 
  HR_abc_getdescendantsns,  // CallStmt3 
  HR_abc_getdescendantsnsx, // CallStmt4 
  HR_abc_callprop,          // CallStmt2 
  HR_abc_callpropx,         // CallStmt3 
  HR_abc_callpropns,        // CallStmt3 
  HR_abc_callpropnsx,       // CallStmt4 
  HR_abc_callproplex,       // CallStmt2 
  HR_abc_callproplexx,      // CallStmt3 
  HR_abc_callproplexns,     // CallStmt3 
  HR_abc_callproplexnsx,    // CallStmt4 
  HR_abc_constructprop,     // CallStmt2 
  HR_abc_constructpropx,    // CallStmt3 
  HR_abc_constructpropns,   // CallStmt3 
  HR_abc_constructpropnsx,  // CallStmt4 
  HR_abc_callsuper,         // CallStmt2 
  HR_abc_callsuperx,        // CallStmt3 
  HR_abc_callsuperns,       // CallStmt3 
  HR_abc_callsupernsx,      // CallStmt4 
  HR_callstatic,            // CallStmt2 
  HR_callmethod,            // CallStmt2 
  HR_callinterface,         // CallStmt2 
  HR_newcatch,              // UnaryStmt 
  HR_setslot,               // CallStmt2 
  HR_getslot,               // CallStmt2 
  HR_slottype,              // BinaryExpr 
  HR_getouterscope,         // BinaryExpr 
  HR_safepoint,             // SafepointInstr 
  HR_setlocal,              // SetlocalInstr 
  HR_newstate,              // ConstantExpr 
  HR_deopt_safepoint,       // DeoptSafepointInstr 
  HR_deopt_finish,          // DeoptFinishInstr 
  HR_deopt_finishcall,      // DeoptFinishCallInstr 
  HR_debugline,             // DebugInstr 
  HR_debugfile,             // DebugInstr 
  HR_string2atom,           // UnaryExpr 
  HR_double2atom,           // UnaryExpr 
  HR_int2atom,              // UnaryExpr 
  HR_uint2atom,             // UnaryExpr 
  HR_scriptobject2atom,     // UnaryExpr 
  HR_bool2atom,             // UnaryExpr 
  HR_ns2atom,               // UnaryExpr 
  HR_atom2bool,             // UnaryExpr 
  HR_atom2double,           // UnaryExpr 
  HR_atom2string,           // UnaryExpr 
  HR_atom2int,              // UnaryExpr 
  HR_atom2uint,             // UnaryExpr 
  HR_atom2scriptobject,     // UnaryExpr 
  HR_atom2ns,               // UnaryExpr 
  HR_i2d,                   // UnaryExpr 
  HR_u2d,                   // UnaryExpr 
  HR_d2i,                   // UnaryExpr 
  HR_d2u,                   // UnaryExpr 
  HR_toslot,                // BinaryExpr 
  HR_toprimitive,           // UnaryStmt 
  HR_eqi,                   // BinaryExpr 
  HR_lti,                   // BinaryExpr 
  HR_lei,                   // BinaryExpr 
  HR_gti,                   // BinaryExpr 
  HR_gei,                   // BinaryExpr 
  HR_eqd,                   // BinaryExpr 
  HR_ltd,                   // BinaryExpr 
  HR_led,                   // BinaryExpr 
  HR_gtd,                   // BinaryExpr 
  HR_ged,                   // BinaryExpr 
  HR_equi,                  // BinaryExpr 
  HR_ltui,                  // BinaryExpr 
  HR_leui,                  // BinaryExpr 
  HR_gtui,                  // BinaryExpr 
  HR_geui,                  // BinaryExpr 
  HR_eqb,                   // BinaryExpr 
  HR_doubletoint32,         // UnaryExpr 
  HR_i2u,                   // UnaryExpr 
  HR_u2i,                   // UnaryExpr 
  HR_abc_dxnslate,          // UnaryStmt 
  HR_abc_dxns,              // UnaryStmt 
  HR_li8,                   // UnaryStmt 
  HR_li16,                  // UnaryStmt 
  HR_li32,                  // UnaryStmt 
  HR_lf32,                  // UnaryStmt 
  HR_lf64,                  // UnaryStmt 
  HR_si8,                   // BinaryStmt 
  HR_si16,                  // BinaryStmt 
  HR_si32,                  // BinaryStmt 
  HR_sf32,                  // BinaryStmt 
  HR_sf64,                  // BinaryStmt 
  HR_abc_equals,            // BinaryStmt 
  HR_eqp,                   // BinaryExpr 
  HR_eqs,                   // BinaryExpr 
  HR_abc_strictequals,      // BinaryExpr 
  HR_abc_setsuper,          // CallStmt2 
  HR_abc_setsuperx,         // CallStmt3 
  HR_abc_setsuperns,        // CallStmt3 
  HR_abc_setsupernsx,       // CallStmt4 
  HR_abc_deleteprop,        // CallStmt2 
  HR_abc_deletepropx,       // CallStmt3 
  HR_abc_deletepropns,      // CallStmt3 
  HR_abc_deletepropnsx,     // CallStmt4 
  HR_abc_getprop,           // CallStmt2 
  HR_abc_getpropx,          // CallStmt3 
  HR_getpropertylate_u,     // BinaryStmt 
  HR_getpropertylate_i,     // BinaryStmt 
  HR_getpropertylate_d,     // BinaryStmt 
  HR_array_get_u,           // BinaryStmt 
  HR_array_get_i,           // BinaryStmt 
  HR_array_get_d,           // BinaryStmt 
  HR_vectorint_get_u,       // BinaryStmt 
  HR_vectorint_get_i,       // BinaryStmt 
  HR_vectorint_get_d,       // BinaryStmt 
  HR_vectoruint_get_u,      // BinaryStmt 
  HR_vectoruint_get_i,      // BinaryStmt 
  HR_vectoruint_get_d,      // BinaryStmt 
  HR_vectordouble_get_u,    // BinaryStmt 
  HR_vectordouble_get_i,    // BinaryStmt 
  HR_vectordouble_get_d,    // BinaryStmt 
  HR_abc_getpropns,         // CallStmt3 
  HR_abc_getpropnsx,        // CallStmt4 
  HR_abc_setprop,           // CallStmt2 
  HR_abc_setpropx,          // CallStmt3 
  HR_setpropertylate_u,     // CallStmt2 
  HR_setpropertylate_i,     // CallStmt2 
  HR_setpropertylate_d,     // CallStmt2 
  HR_array_set_u,           // CallStmt2 
  HR_array_set_i,           // CallStmt2 
  HR_array_set_d,           // CallStmt2 
  HR_vectorint_set_u,       // CallStmt2 
  HR_vectorint_set_i,       // CallStmt2 
  HR_vectorint_set_d,       // CallStmt2 
  HR_vectoruint_set_u,      // CallStmt2 
  HR_vectoruint_set_i,      // CallStmt2 
  HR_vectoruint_set_d,      // CallStmt2 
  HR_vectordouble_set_u,    // CallStmt2 
  HR_vectordouble_set_i,    // CallStmt2 
  HR_vectordouble_set_d,    // CallStmt2 
  HR_abc_setpropns,         // CallStmt3 
  HR_abc_setpropnsx,        // CallStmt4 
  HR_abc_initprop,          // CallStmt2 
  HR_abc_initpropx,         // CallStmt3 
  HR_abc_initpropns,        // CallStmt3 
  HR_abc_initpropnsx,       // CallStmt4 
  HR_abc_increment,         // UnaryStmt template
  HR_abc_decrement,         // UnaryStmt template
  HR_abc_increment_i,       // UnaryStmt template
  HR_abc_decrement_i,       // UnaryStmt template
  HR_abc_not,               // UnaryStmt template
  HR_abc_negate,            // UnaryStmt template
  HR_abc_bitnot,            // UnaryStmt template
  HR_abc_negate_i,          // UnaryStmt template
  HR_abc_sxi1,              // UnaryStmt template
  HR_abc_sxi8,              // UnaryStmt template
  HR_abc_sxi16,             // UnaryStmt template
  HR_abc_checkfilter,       // UnaryStmt template
  HR_abc_li8,               // UnaryStmt template
  HR_abc_li16,              // UnaryStmt template
  HR_abc_li32,              // UnaryStmt template
  HR_abc_lf32,              // UnaryStmt template
  HR_abc_lf64,              // UnaryStmt template
  HR_abc_si8,               // BinaryStmt template
  HR_abc_si16,              // BinaryStmt template
  HR_abc_si32,              // BinaryStmt template
  HR_abc_sf32,              // BinaryStmt template
  HR_abc_sf64,              // BinaryStmt template
  HR_abc_subtract,          // BinaryStmt template
  HR_abc_multiply,          // BinaryStmt template
  HR_abc_modulo,            // BinaryStmt template
  HR_abc_divide,            // BinaryStmt template
  HR_abc_add_i,             // BinaryStmt template
  HR_abc_subtract_i,        // BinaryStmt template
  HR_abc_multiply_i,        // BinaryStmt template
  HR_abc_bitor,             // BinaryStmt template
  HR_abc_bitand,            // BinaryStmt template
  HR_abc_bitxor,            // BinaryStmt template
  HR_abc_lshift,            // BinaryStmt template
  HR_abc_rshift,            // BinaryStmt template
  HR_abc_urshift,           // BinaryStmt template
  HR_add_ui,                // BinaryStmt template
  HR_add_nn,                // BinaryStmt template
  HR_add_ss,                // BinaryStmt template
  HR_abc_lessthan,          // BinaryStmt template
  HR_abc_greaterequals,     // BinaryStmt template
  HR_abc_greaterthan,       // BinaryStmt template
  HR_abc_lessequals,        // BinaryStmt template
  HR_abc_equals_ii,         // BinaryStmt template
  HR_abc_equals_uu,         // BinaryStmt template
  HR_abc_equals_bb,         // BinaryStmt template
  HR_abc_equals_nn,         // BinaryStmt template
  HR_abc_equals_pp,         // BinaryStmt template
  HR_abc_equals_ss,         // BinaryStmt template
  HR_abc_getslot,           // CallStmt2 template
  HR_abc_getprop_slot,      // CallStmt2 template
  HR_getpropx_u,            // CallStmt3 template
  HR_getpropx_i,            // CallStmt3 template
  HR_getpropx_d,            // CallStmt3 template
  HR_getpropx_au,           // CallStmt3 template
  HR_getpropx_ai,           // CallStmt3 template
  HR_getpropx_ad,           // CallStmt3 template
  HR_getpropx_viu,          // CallStmt3 template
  HR_getpropx_vii,          // CallStmt3 template
  HR_getpropx_vid,          // CallStmt3 template
  HR_getpropx_vuu,          // CallStmt3 template
  HR_getpropx_vui,          // CallStmt3 template
  HR_getpropx_vud,          // CallStmt3 template
  HR_getpropx_vdu,          // CallStmt3 template
  HR_getpropx_vdi,          // CallStmt3 template
  HR_getpropx_vdd,          // CallStmt3 template
  HR_abc_setprop_slot,      // CallStmt2 template
  HR_setpropx_u,            // CallStmt3 template
  HR_setpropx_i,            // CallStmt3 template
  HR_setpropx_d,            // CallStmt3 template
  HR_setpropx_au,           // CallStmt3 template
  HR_setpropx_ai,           // CallStmt3 template
  HR_setpropx_ad,           // CallStmt3 template
  HR_setpropx_viu,          // CallStmt3 template
  HR_setpropx_vii,          // CallStmt3 template
  HR_setpropx_vid,          // CallStmt3 template
  HR_setpropx_vuu,          // CallStmt3 template
  HR_setpropx_vui,          // CallStmt3 template
  HR_setpropx_vud,          // CallStmt3 template
  HR_setpropx_vdu,          // CallStmt3 template
  HR_setpropx_vdi,          // CallStmt3 template
  HR_setpropx_vdd,          // CallStmt3 template
  HR_abc_setslot,           // CallStmt2 template
  HR_findprop2finddef,      // NaryStmt1 template
  HR_findprop2getouter,     // NaryStmt1 template
  HR_callprop_string,       // CallStmt2 template
  HR_coerce_any,            // BinaryStmt template
  HR_coerce_object,         // BinaryStmt template
  HR_coerce_number,         // BinaryStmt template
  HR_coerce_int,            // BinaryStmt template
  HR_coerce_uint,           // BinaryStmt template
  HR_coerce_boolean,        // BinaryStmt template
  HR_coerce_string,         // BinaryStmt template
  HR_coerce_ns,             // BinaryStmt template
  HR_inttouint,             // UnaryStmt template
  HR_uinttoint,             // UnaryStmt template
  HR_numbertoint,           // UnaryStmt template
  HR_numbertouint,          // UnaryStmt template
  HR_abc_modulo_and,        // BinaryStmt template
  HR_MAX = HR_abc_modulo_and + 1
};

/// VarargKind designates variability in at most one
/// of an instruction's four argument groups.
///
enum VarargKind {
  kVarIn,
  kVarOut,
  kVarNone,
  VARARGKIND_MAX = kVarNone
};

/// ShapeRep describes the representation of an instruction shape.
/// Note that when varargs are specified, the corresponding
/// member gives a minimum, rather than exact, quantity.
/// For example, a ShapeRep with vararg == kVarIn and datain == 2
/// describes instructions with *at least* 2 data inputs.
///
struct ShapeRep {
  int num_uses;            // number of Use inputs
  int num_defs;            // number of Def outputs
  VarargKind vararg;       // vararg position, if any
};

/// InstrShape is an enumeration of HR instruction shapes.
/// The representation details of each InstrShape s is described by
/// shape_reps[s].
///
enum InstrShape {
  GOTOINSTR_SHAPE,          // 0, 0, kVarIn             1 instrs
  ARMINSTR_SHAPE,           // 0, 0, kVarOut            1 instrs
  CATCHBLOCKINSTR_SHAPE,    // 0, 0, kVarOut            1 instrs
  LABELINSTR_SHAPE,         // 0, 0, kVarOut            1 instrs
  CONSTANTEXPR_SHAPE,       // 0, 1, kVarNone           3 instrs
  STARTINSTR_SHAPE,         // 0, 1, kVarOut            2 instrs
  IFINSTR_SHAPE,            // 1, 0, kVarIn             1 instrs
  SWITCHINSTR_SHAPE,        // 1, 0, kVarIn             1 instrs
  UNARYEXPR_SHAPE,          // 1, 1, kVarNone           33 instrs
  BINARYEXPR_SHAPE,         // 2, 1, kVarNone           57 instrs
  SETLOCALINSTR_SHAPE,      // 2, 1, kVarNone           1 instrs
  STOPINSTR_SHAPE,          // 1, 0, kVarIn             2 instrs
  DEOPTSAFEPOINTINSTR_SHAPE, // 1, 1, kVarIn             1 instrs
  DEOPTFINISHINSTR_SHAPE,   // 1, 1, kVarNone           1 instrs
  VOIDSTMT_SHAPE,           // 1, 1, kVarNone           0 instrs
  NARYSTMT0_SHAPE,          // 1, 2, kVarIn             3 instrs
  SAFEPOINTINSTR_SHAPE,     // 1, 2, kVarIn             1 instrs
  DEBUGINSTR_SHAPE,         // 2, 1, kVarNone           2 instrs
  DEOPTFINISHCALLINSTR_SHAPE, // 2, 1, kVarNone           1 instrs
  NARYSTMT1_SHAPE,          // 2, 2, kVarIn             3 instrs
  UNARYSTMT_SHAPE,          // 2, 2, kVarNone           42 instrs
  CALLSTMT2_SHAPE,          // 3, 2, kVarIn             39 instrs
  NARYSTMT2_SHAPE,          // 3, 2, kVarIn             1 instrs
  BINARYSTMT_SHAPE,         // 3, 2, kVarNone           73 instrs
  HASNEXT2STMT_SHAPE,       // 3, 4, kVarNone           1 instrs
  CALLSTMT3_SHAPE,          // 4, 2, kVarIn             52 instrs
  NARYSTMT3_SHAPE,          // 4, 2, kVarIn             2 instrs
  CALLSTMT4_SHAPE,          // 5, 2, kVarIn             11 instrs
  NARYSTMT4_SHAPE,          // 5, 2, kVarIn             6 instrs
  SHAPE_MAX = NARYSTMT4_SHAPE + 1
};

/// shape_reps[] gives the representations of
/// the shapes enumerated by InstrShape.
///
extern const ShapeRep shape_reps[SHAPE_MAX];

/// InstrAttrs contains attributes specific to (and universal
/// across all instances of) a particular HR instruction.
///
struct InstrAttrs {
  const char* name;  // printable name
  InstrShape shape;  // shape (const)
  bool hastem;       // true if instruction has a template (const)
};

/// instr_attrs describes the instructions enumerated in InstrKind.
///
extern const InstrAttrs instr_attrs[HR_MAX];

