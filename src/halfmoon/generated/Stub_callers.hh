///
/// generated by templates.py -- do not edit
///

namespace halfmoon {
class StubCaller {
 public:
  // throw: (Effect, Atom) -> ()
  static void do_throw(Interpreter* interp, StopInstr* instr) {
    Stubs::do_throw(&interp->frame_,
        interp->getAtom(instr->use(1)));
    (void)interp;
  }

  // coerce: (Effect, Traits, Atom) -> (Effect, Atom)
  static void do_coerce(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_coerce(&interp->frame_,
        interp->getTraits(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // cast: (Effect, Traits, Atom) -> (Effect, ScriptObject)
  static void do_cast(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_cast(&interp->frame_,
        interp->getTraits(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // castobject: Atom -> Atom
  static void do_castobject(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_castobject(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // tonumber: (Effect, Atom) -> (Effect, Number)
  static void do_tonumber(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_tonumber(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // toint: (Effect, Atom) -> (Effect, Int)
  static void do_toint(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_toint(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // touint: (Effect, Atom) -> (Effect, Uint)
  static void do_touint(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_touint(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // toboolean: Atom -> Boolean
  static void do_toboolean(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_toboolean(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // d2b: Number -> Boolean
  static void do_d2b(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_d2b(&interp->frame_,
        interp->getDouble(instr->use(0))));
  }

  // caststring: (Effect, Atom) -> (Effect, String)
  static void do_caststring(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_caststring(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // castns: (Effect, Atom) -> (Effect, Namespace)
  static void do_castns(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_castns(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // cknull: (Effect, Atom) -> (Effect, Atom~)
  static void do_cknull(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_cknull(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // cknullobject: (Effect, ScriptObject) -> (Effect, ScriptObject~)
  static void do_cknullobject(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_cknullobject(&interp->frame_,
        interp->getObject(instr->use(1))));
  }

  // cktimeout: (Effect, Env) -> (Effect, Boolean)
  static void do_cktimeout(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_cktimeout(&interp->frame_,
        interp->getEnv(instr->use(1))));
  }

  // abc_hasnext: (Effect, Atom, Int) -> (Effect, Int)
  static void do_abc_hasnext(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_hasnext(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getInt(instr->use(2))));
  }

  // never: () -> Bot
  static void do_never(Interpreter* interp, ConstantExpr* instr) {
    Stubs::do_never(&interp->frame_);
    (void)interp;
    (void)instr;
  }

  // call: (Effect, Atom, Atom, Atom) -> (Effect, Atom)
  static void do_call(Interpreter* interp, CallStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_call(&interp->frame_,
        interp->getAtom(instr->use(1)),
        argc, args));
  }

  // construct: (Effect, Atom, Atom, Atom) -> (Effect, Atom~)
  static void do_construct(Interpreter* interp, CallStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_construct(&interp->frame_,
        interp->getAtom(instr->use(1)),
        argc, args));
  }

  // constructsuper: (Effect, Env, Atom~, Atom) -> (Effect, Bot)
  static void do_constructsuper(Interpreter* interp, CallStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    Stubs::do_constructsuper(&interp->frame_,
        interp->getEnv(instr->use(1)),
        argc, args);
    (void)interp;
  }

  // loadenv_namespace: (Ord, Namespace~) -> Env
  static void do_loadenv_namespace(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv_namespace(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getNs(instr->use(1))));
  }

  // loadenv_boolean: (Ord, Boolean) -> Env
  static void do_loadenv_boolean(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv_boolean(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getBool(instr->use(1))));
  }

  // loadenv_number: (Ord, Number~) -> Env
  static void do_loadenv_number(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv_number(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // loadenv_string: (Ord, String~) -> Env
  static void do_loadenv_string(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv_string(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getString(instr->use(1))));
  }

  // loadenv_interface: (Method, ScriptObject~) -> Env
  static void do_loadenv_interface(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv_interface(&interp->frame_,
        interp->getMethod(instr->use(0)),
        interp->getObject(instr->use(1))));
  }

  // loadenv: (Ord, ScriptObject~) -> Env
  static void do_loadenv(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getObject(instr->use(1))));
  }

  // loadenv_atom: (Ord, Atom~) -> Env
  static void do_loadenv_atom(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv_atom(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getAtom(instr->use(1))));
  }

  // loadinitenv: ScriptObject~ -> Env
  static void do_loadinitenv(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadinitenv(&interp->frame_,
        interp->getObject(instr->use(0))));
  }

  // loadsuperinitenv: Env -> Env
  static void do_loadsuperinitenv(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadsuperinitenv(&interp->frame_,
        interp->getEnv(instr->use(0))));
  }

  // loadenv_env: (Ord, Env) -> Env
  static void do_loadenv_env(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_loadenv_env(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getEnv(instr->use(1))));
  }

  // newobject: (Effect, Atom) -> (Effect, ScriptObject~)
  static void do_newobject(Interpreter* interp, NaryStmt0* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = Value(Stubs::do_newobject(&interp->frame_,
        argc, args));
  }

  // newarray: (Effect, Atom) -> (Effect, Array~)
  static void do_newarray(Interpreter* interp, NaryStmt0* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = Value(Stubs::do_newarray(&interp->frame_,
        argc, args));
  }

  // applytype: (Effect, Atom) -> (Effect, Atom)
  static void do_applytype(Interpreter* interp, NaryStmt0* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_applytype(&interp->frame_,
        argc, args));
  }

  // newinstance: Class~ -> ScriptObject~
  static void do_newinstance(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_newinstance(&interp->frame_,
        (ClassClosure*)interp->getObject(instr->use(0))));
  }

  // abc_convert_s: (Effect, Atom) -> (Effect, String~)
  static void do_abc_convert_s(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_convert_s(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // abc_esc_xelem: (Effect, Atom) -> (Effect, String~)
  static void do_abc_esc_xelem(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_esc_xelem(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // abc_esc_xattr: (Effect, Atom) -> (Effect, String~)
  static void do_abc_esc_xattr(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_esc_xattr(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // abc_typeof: Atom -> String~
  static void do_abc_typeof(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_typeof(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // ckfilter: Atom~ -> Atom~
  static void do_ckfilter(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_ckfilter(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // abc_add: (Effect, Atom, Atom) -> (Effect, Atom)
  static void do_abc_add(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_add(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // addd: (Number, Number) -> Number
  static void do_addd(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_addd(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // concat_strings: (String, String) -> String~
  static void do_concat_strings(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_concat_strings(&interp->frame_,
        interp->getString(instr->use(0)),
        interp->getString(instr->use(1))));
  }

  // abc_nextname: (Effect, Atom, Int) -> (Effect, Atom)
  static void do_abc_nextname(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_nextname(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getInt(instr->use(2))));
  }

  // abc_nextvalue: (Effect, Atom, Int) -> (Effect, Atom)
  static void do_abc_nextvalue(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_nextvalue(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getInt(instr->use(2))));
  }

  // lessthan: (Atom, Atom) -> Boolean
  static void do_lessthan(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_lessthan(&interp->frame_,
        interp->getAtom(instr->use(0)),
        interp->getAtom(instr->use(1))));
  }

  // lessequals: (Atom, Atom) -> Boolean
  static void do_lessequals(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_lessequals(&interp->frame_,
        interp->getAtom(instr->use(0)),
        interp->getAtom(instr->use(1))));
  }

  // greaterthan: (Atom, Atom) -> Boolean
  static void do_greaterthan(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_greaterthan(&interp->frame_,
        interp->getAtom(instr->use(0)),
        interp->getAtom(instr->use(1))));
  }

  // greaterequals: (Atom, Atom) -> Boolean
  static void do_greaterequals(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_greaterequals(&interp->frame_,
        interp->getAtom(instr->use(0)),
        interp->getAtom(instr->use(1))));
  }

  // abc_instanceof: (Effect, Atom, Atom) -> (Effect, Boolean)
  static void do_abc_instanceof(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_instanceof(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_istype: (Effect, Traits, Atom) -> (Effect, Boolean)
  static void do_abc_istype(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_istype(&interp->frame_,
        interp->getTraits(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_istypelate: (Effect, Atom, Atom~) -> (Effect, Boolean)
  static void do_abc_istypelate(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_istypelate(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_astype: (Traits, Atom) -> Atom
  static void do_abc_astype(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_astype(&interp->frame_,
        interp->getTraits(instr->use(0)),
        interp->getAtom(instr->use(1))));
  }

  // abc_astypelate: (Effect, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_astypelate(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_astypelate(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_in: (Effect, Atom, Atom~) -> (Effect, Boolean)
  static void do_abc_in(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_in(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // divd: (Number, Number) -> Number
  static void do_divd(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_divd(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // modulo: (Number, Number) -> Number
  static void do_modulo(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_modulo(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // subd: (Number, Number) -> Number
  static void do_subd(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_subd(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // muld: (Number, Number) -> Number
  static void do_muld(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_muld(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // addi: (Int, Int) -> Int
  static void do_addi(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_addi(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // subi: (Int, Int) -> Int
  static void do_subi(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_subi(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // muli: (Int, Int) -> Int
  static void do_muli(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_muli(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // ori: (Int, Int) -> Int
  static void do_ori(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_ori(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // andi: (Int, Int) -> Int
  static void do_andi(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_andi(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // xori: (Int, Int) -> Int
  static void do_xori(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_xori(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // lshi: (Int, Int) -> Int
  static void do_lshi(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_lshi(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // rshi: (Int, Int) -> Int
  static void do_rshi(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_rshi(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // rshui: (Int, Int) -> Uint
  static void do_rshui(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_rshui(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // noti: Int -> Int
  static void do_noti(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_noti(&interp->frame_,
        interp->getInt(instr->use(0))));
  }

  // negi: Int -> Int
  static void do_negi(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_negi(&interp->frame_,
        interp->getInt(instr->use(0))));
  }

  // negd: Number -> Number
  static void do_negd(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_negd(&interp->frame_,
        interp->getDouble(instr->use(0))));
  }

  // not: Boolean -> Boolean
  static void do_not(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_not(&interp->frame_,
        interp->getBool(instr->use(0))));
  }

  // newactivation: (Effect, Env) -> (Effect, ScriptObject~)
  static void do_newactivation(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_newactivation(&interp->frame_,
        interp->getEnv(instr->use(1))));
  }

  // abc_finddef: (Effect, Name, Env) -> (Effect, ScriptObject~)
  static void do_abc_finddef(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_finddef(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2))));
  }

  // abc_findpropstrict: (Effect, Name, Env, Ord, Atom~) -> (Effect, Atom~)
  static void do_abc_findpropstrict(Interpreter* interp, NaryStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findpropstrict(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        argc, args));
  }

  // abc_findpropstrictx: (Effect, Name, Env, Ord, Atom, Atom~) -> (Effect, Atom~)
  static void do_abc_findpropstrictx(Interpreter* interp, NaryStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findpropstrictx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        interp->getAtom(instr->use(4)),
        argc, args));
  }

  // abc_findpropstrictns: (Effect, Name, Env, Ord, Atom, Atom~) -> (Effect, Atom~)
  static void do_abc_findpropstrictns(Interpreter* interp, NaryStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findpropstrictns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        interp->getAtom(instr->use(4)),
        argc, args));
  }

  // abc_findpropstrictnsx: (Effect, Name, Env, Ord, Atom, Atom~) -> (Effect, Atom~)
  static void do_abc_findpropstrictnsx(Interpreter* interp, NaryStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findpropstrictnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        interp->getAtom(instr->use(4)),
        argc, args));
  }

  // abc_findproperty: (Effect, Name, Env, Ord, Atom~) -> (Effect, Atom~)
  static void do_abc_findproperty(Interpreter* interp, NaryStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findproperty(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        argc, args));
  }

  // abc_findpropertyx: (Effect, Name, Env, Ord, Atom, Atom~) -> (Effect, Atom~)
  static void do_abc_findpropertyx(Interpreter* interp, NaryStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findpropertyx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        interp->getAtom(instr->use(4)),
        argc, args));
  }

  // abc_findpropertyns: (Effect, Name, Env, Ord, Atom, Atom~) -> (Effect, Atom~)
  static void do_abc_findpropertyns(Interpreter* interp, NaryStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findpropertyns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        interp->getAtom(instr->use(4)),
        argc, args));
  }

  // abc_findpropertynsx: (Effect, Name, Env, Ord, Atom, Atom~) -> (Effect, Atom~)
  static void do_abc_findpropertynsx(Interpreter* interp, NaryStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_findpropertynsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getEnv(instr->use(2)),
        interp->getOrdinal(instr->use(3)),
        interp->getAtom(instr->use(4)),
        argc, args));
  }

  // newclass: (Effect, Traits~, Class, Atom~) -> (Effect, Class~)
  static void do_newclass(Interpreter* interp, NaryStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = Value(Stubs::do_newclass(&interp->frame_,
        interp->getTraits(instr->use(1)),
        (ClassClosure*)interp->getObject(instr->use(2)),
        argc, args));
  }

  // newfunction: (Effect, Method, Atom~) -> (Effect, Function~)
  static void do_newfunction(Interpreter* interp, NaryStmt1* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = Value(Stubs::do_newfunction(&interp->frame_,
        interp->getMethod(instr->use(1)),
        argc, args));
  }

  // abc_getsuper: (Effect, Name, Atom~) -> (Effect, Atom)
  static void do_abc_getsuper(Interpreter* interp, CallStmt2* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getsuper(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_getsuperx: (Effect, Name, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getsuperx(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getsuperx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // abc_getsuperns: (Effect, Name, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getsuperns(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getsuperns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // abc_getsupernsx: (Effect, Name, Atom, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getsupernsx(Interpreter* interp, CallStmt4* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getsupernsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4))));
  }

  // abc_getdescendants: (Effect, Name, Atom~) -> (Effect, Atom)
  static void do_abc_getdescendants(Interpreter* interp, CallStmt2* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getdescendants(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_getdescendantsx: (Effect, Name, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getdescendantsx(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getdescendantsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // abc_getdescendantsns: (Effect, Name, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getdescendantsns(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getdescendantsns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // abc_getdescendantsnsx: (Effect, Name, Atom, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getdescendantsnsx(Interpreter* interp, CallStmt4* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getdescendantsnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4))));
  }

  // abc_callprop: (Effect, Name, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callprop(Interpreter* interp, CallStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callprop(&interp->frame_,
        interp->getName(instr->use(1)),
        argc, args));
  }

  // abc_callpropx: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callpropx(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callpropx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_callpropns: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callpropns(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callpropns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_callpropnsx: (Effect, Name, Atom, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callpropnsx(Interpreter* interp, CallStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callpropnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        argc, args));
  }

  // abc_callproplex: (Effect, Name, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callproplex(Interpreter* interp, CallStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callproplex(&interp->frame_,
        interp->getName(instr->use(1)),
        argc, args));
  }

  // abc_callproplexx: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callproplexx(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callproplexx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_callproplexns: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callproplexns(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callproplexns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_callproplexnsx: (Effect, Name, Atom, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callproplexnsx(Interpreter* interp, CallStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callproplexnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        argc, args));
  }

  // abc_constructprop: (Effect, Name, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_constructprop(Interpreter* interp, CallStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_constructprop(&interp->frame_,
        interp->getName(instr->use(1)),
        argc, args));
  }

  // abc_constructpropx: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_constructpropx(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_constructpropx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_constructpropns: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_constructpropns(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_constructpropns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_constructpropnsx: (Effect, Name, Atom, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_constructpropnsx(Interpreter* interp, CallStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_constructpropnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        argc, args));
  }

  // abc_callsuper: (Effect, Name, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callsuper(Interpreter* interp, CallStmt2* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callsuper(&interp->frame_,
        interp->getName(instr->use(1)),
        argc, args));
  }

  // abc_callsuperx: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callsuperx(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callsuperx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_callsuperns: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callsuperns(Interpreter* interp, CallStmt3* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callsuperns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        argc, args));
  }

  // abc_callsupernsx: (Effect, Name, Atom, Atom, Atom~, Atom) -> (Effect, Atom)
  static void do_abc_callsupernsx(Interpreter* interp, CallStmt4* instr) {
    int argc = instr->arg_count();
    Use* arg_uses = instr->args();
    Atom* args = (Atom*)interp->args_out_;
    for (int i = 0; i < argc; ++i)
      args[i] = interp->getAtom(arg_uses[i]);
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_callsupernsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        argc, args));
  }

  // newcatch: (Effect, Traits~) -> (Effect, Atom~)
  static void do_newcatch(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_newcatch(&interp->frame_,
        interp->getTraits(instr->use(1))));
  }

  // slottype: (ScriptObject~, Ord) -> Traits
  static void do_slottype(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_slottype(&interp->frame_,
        interp->getObject(instr->use(0)),
        interp->getOrdinal(instr->use(1))));
  }

  // getouterscope: (Ord, Env) -> Atom~
  static void do_getouterscope(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_getouterscope(&interp->frame_,
        interp->getOrdinal(instr->use(0)),
        interp->getEnv(instr->use(1))));
  }

  // deopt_finish: Effect -> Effect
  static void do_deopt_finish(Interpreter* interp, DeoptFinishInstr* instr) {
    Stubs::do_deopt_finish(&interp->frame_);
    (void)interp;
    (void)instr;
  }

  // debugline: (Effect, Int) -> Effect
  static void do_debugline(Interpreter* interp, DebugInstr* instr) {
    Stubs::do_debugline(&interp->frame_,
        interp->getInt(instr->use(1)));
    (void)interp;
  }

  // debugfile: (Effect, String) -> Effect
  static void do_debugfile(Interpreter* interp, DebugInstr* instr) {
    Stubs::do_debugfile(&interp->frame_,
        interp->getString(instr->use(1)));
    (void)interp;
  }

  // string2atom: String -> Atom
  static void do_string2atom(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_string2atom(&interp->frame_,
        interp->getString(instr->use(0))));
  }

  // double2atom: Number -> Atom~
  static void do_double2atom(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_double2atom(&interp->frame_,
        interp->getDouble(instr->use(0))));
  }

  // int2atom: Int -> Atom~
  static void do_int2atom(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_int2atom(&interp->frame_,
        interp->getInt(instr->use(0))));
  }

  // uint2atom: Uint -> Atom~
  static void do_uint2atom(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_uint2atom(&interp->frame_,
        interp->getUint(instr->use(0))));
  }

  // scriptobject2atom: ScriptObject -> Atom
  static void do_scriptobject2atom(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_scriptobject2atom(&interp->frame_,
        interp->getObject(instr->use(0))));
  }

  // bool2atom: Boolean -> Atom~
  static void do_bool2atom(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_bool2atom(&interp->frame_,
        interp->getBool(instr->use(0))));
  }

  // ns2atom: Namespace -> Atom
  static void do_ns2atom(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_ns2atom(&interp->frame_,
        interp->getNs(instr->use(0))));
  }

  // atom2bool: Atom~ -> Boolean
  static void do_atom2bool(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_atom2bool(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // atom2double: Atom -> Number
  static void do_atom2double(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_atom2double(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // atom2string: Atom -> String
  static void do_atom2string(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_atom2string(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // atom2int: Atom -> Int
  static void do_atom2int(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_atom2int(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // atom2uint: Atom -> Uint
  static void do_atom2uint(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_atom2uint(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // atom2scriptobject: Atom -> ScriptObject
  static void do_atom2scriptobject(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_atom2scriptobject(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // atom2ns: Atom -> Namespace
  static void do_atom2ns(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_atom2ns(&interp->frame_,
        interp->getAtom(instr->use(0))));
  }

  // i2d: Int -> Number
  static void do_i2d(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_i2d(&interp->frame_,
        interp->getInt(instr->use(0))));
  }

  // u2d: Uint -> Number
  static void do_u2d(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_u2d(&interp->frame_,
        interp->getUint(instr->use(0))));
  }

  // d2i: Number -> Int
  static void do_d2i(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_d2i(&interp->frame_,
        interp->getDouble(instr->use(0))));
  }

  // d2u: Number -> Uint
  static void do_d2u(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_d2u(&interp->frame_,
        interp->getDouble(instr->use(0))));
  }

  // toslot: (ScriptObject, Name) -> Ord
  static void do_toslot(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = OrdValue(Stubs::do_toslot(&interp->frame_,
        interp->getObject(instr->use(0)),
        interp->getName(instr->use(1))));
  }

  // toprimitive: (Effect, Atom) -> (Effect, Atom)
  static void do_toprimitive(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_toprimitive(&interp->frame_,
        interp->getAtom(instr->use(1))));
  }

  // eqi: (Int, Int) -> Boolean
  static void do_eqi(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_eqi(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // lti: (Int, Int) -> Boolean
  static void do_lti(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_lti(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // lei: (Int, Int) -> Boolean
  static void do_lei(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_lei(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // gti: (Int, Int) -> Boolean
  static void do_gti(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_gti(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // gei: (Int, Int) -> Boolean
  static void do_gei(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_gei(&interp->frame_,
        interp->getInt(instr->use(0)),
        interp->getInt(instr->use(1))));
  }

  // eqd: (Number, Number) -> Boolean
  static void do_eqd(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_eqd(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // ltd: (Number, Number) -> Boolean
  static void do_ltd(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_ltd(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // led: (Number, Number) -> Boolean
  static void do_led(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_led(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // gtd: (Number, Number) -> Boolean
  static void do_gtd(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_gtd(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // ged: (Number, Number) -> Boolean
  static void do_ged(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_ged(&interp->frame_,
        interp->getDouble(instr->use(0)),
        interp->getDouble(instr->use(1))));
  }

  // equi: (Uint, Uint) -> Boolean
  static void do_equi(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_equi(&interp->frame_,
        interp->getUint(instr->use(0)),
        interp->getUint(instr->use(1))));
  }

  // ltui: (Uint, Uint) -> Boolean
  static void do_ltui(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_ltui(&interp->frame_,
        interp->getUint(instr->use(0)),
        interp->getUint(instr->use(1))));
  }

  // leui: (Uint, Uint) -> Boolean
  static void do_leui(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_leui(&interp->frame_,
        interp->getUint(instr->use(0)),
        interp->getUint(instr->use(1))));
  }

  // gtui: (Uint, Uint) -> Boolean
  static void do_gtui(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_gtui(&interp->frame_,
        interp->getUint(instr->use(0)),
        interp->getUint(instr->use(1))));
  }

  // geui: (Uint, Uint) -> Boolean
  static void do_geui(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_geui(&interp->frame_,
        interp->getUint(instr->use(0)),
        interp->getUint(instr->use(1))));
  }

  // eqb: (Boolean, Boolean) -> Boolean
  static void do_eqb(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_eqb(&interp->frame_,
        interp->getBool(instr->use(0)),
        interp->getBool(instr->use(1))));
  }

  // doubletoint32: Number -> Int
  static void do_doubletoint32(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_doubletoint32(&interp->frame_,
        interp->getDouble(instr->use(0))));
  }

  // i2u: Int -> Uint
  static void do_i2u(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_i2u(&interp->frame_,
        interp->getInt(instr->use(0))));
  }

  // u2i: Uint -> Int
  static void do_u2i(Interpreter* interp, UnaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_u2i(&interp->frame_,
        interp->getUint(instr->use(0))));
  }

  // abc_dxnslate: (Effect, Atom) -> (Effect, Bot)
  static void do_abc_dxnslate(Interpreter* interp, UnaryStmt* instr) {
    Stubs::do_abc_dxnslate(&interp->frame_,
        interp->getAtom(instr->use(1)));
    (void)interp;
  }

  // abc_dxns: (Effect, String~) -> (Effect, Bot)
  static void do_abc_dxns(Interpreter* interp, UnaryStmt* instr) {
    Stubs::do_abc_dxns(&interp->frame_,
        interp->getString(instr->use(1)));
    (void)interp;
  }

  // li8: (Effect, Int) -> (Effect, Int)
  static void do_li8(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_li8(&interp->frame_,
        interp->getInt(instr->use(1))));
  }

  // li16: (Effect, Int) -> (Effect, Int)
  static void do_li16(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_li16(&interp->frame_,
        interp->getInt(instr->use(1))));
  }

  // li32: (Effect, Int) -> (Effect, Int)
  static void do_li32(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_li32(&interp->frame_,
        interp->getInt(instr->use(1))));
  }

  // lf32: (Effect, Int) -> (Effect, Number)
  static void do_lf32(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_lf32(&interp->frame_,
        interp->getInt(instr->use(1))));
  }

  // lf64: (Effect, Int) -> (Effect, Number)
  static void do_lf64(Interpreter* interp, UnaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_lf64(&interp->frame_,
        interp->getInt(instr->use(1))));
  }

  // si8: (Effect, Int, Int) -> (Effect, Bot)
  static void do_si8(Interpreter* interp, BinaryStmt* instr) {
    Stubs::do_si8(&interp->frame_,
        interp->getInt(instr->use(1)),
        interp->getInt(instr->use(2)));
    (void)interp;
  }

  // si16: (Effect, Int, Int) -> (Effect, Bot)
  static void do_si16(Interpreter* interp, BinaryStmt* instr) {
    Stubs::do_si16(&interp->frame_,
        interp->getInt(instr->use(1)),
        interp->getInt(instr->use(2)));
    (void)interp;
  }

  // si32: (Effect, Int, Int) -> (Effect, Bot)
  static void do_si32(Interpreter* interp, BinaryStmt* instr) {
    Stubs::do_si32(&interp->frame_,
        interp->getInt(instr->use(1)),
        interp->getInt(instr->use(2)));
    (void)interp;
  }

  // sf32: (Effect, Number, Int) -> (Effect, Bot)
  static void do_sf32(Interpreter* interp, BinaryStmt* instr) {
    Stubs::do_sf32(&interp->frame_,
        interp->getDouble(instr->use(1)),
        interp->getInt(instr->use(2)));
    (void)interp;
  }

  // sf64: (Effect, Number, Int) -> (Effect, Bot)
  static void do_sf64(Interpreter* interp, BinaryStmt* instr) {
    Stubs::do_sf64(&interp->frame_,
        interp->getDouble(instr->use(1)),
        interp->getInt(instr->use(2)));
    (void)interp;
  }

  // abc_equals: (Effect, Atom, Atom) -> (Effect, Boolean)
  static void do_abc_equals(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_equals(&interp->frame_,
        interp->getAtom(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // eqp: (ScriptObject, ScriptObject) -> Boolean
  static void do_eqp(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_eqp(&interp->frame_,
        interp->getObject(instr->use(0)),
        interp->getObject(instr->use(1))));
  }

  // eqs: (String, String) -> Boolean
  static void do_eqs(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_eqs(&interp->frame_,
        interp->getString(instr->use(0)),
        interp->getString(instr->use(1))));
  }

  // abc_strictequals: (Atom, Atom) -> Boolean
  static void do_abc_strictequals(Interpreter* interp, BinaryExpr* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_strictequals(&interp->frame_,
        interp->getAtom(instr->use(0)),
        interp->getAtom(instr->use(1))));
  }

  // abc_setsuper: (Effect, Name, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setsuper(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_abc_setsuper(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // abc_setsuperx: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setsuperx(Interpreter* interp, CallStmt3* instr) {
    Stubs::do_abc_setsuperx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)));
    (void)interp;
  }

  // abc_setsuperns: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setsuperns(Interpreter* interp, CallStmt3* instr) {
    Stubs::do_abc_setsuperns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)));
    (void)interp;
  }

  // abc_setsupernsx: (Effect, Name, Atom, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setsupernsx(Interpreter* interp, CallStmt4* instr) {
    Stubs::do_abc_setsupernsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)),
        interp->getAtom(instr->use(5)));
    (void)interp;
  }

  // abc_deleteprop: (Effect, Name, Atom~) -> (Effect, Boolean)
  static void do_abc_deleteprop(Interpreter* interp, CallStmt2* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_deleteprop(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_deletepropx: (Effect, Name, Atom, Atom~) -> (Effect, Boolean)
  static void do_abc_deletepropx(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_deletepropx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // abc_deletepropns: (Effect, Name, Atom, Atom~) -> (Effect, Boolean)
  static void do_abc_deletepropns(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_deletepropns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // abc_deletepropnsx: (Effect, Name, Atom, Atom, Atom~) -> (Effect, Boolean)
  static void do_abc_deletepropnsx(Interpreter* interp, CallStmt4* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_abc_deletepropnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4))));
  }

  // abc_getprop: (Effect, Name, Atom~) -> (Effect, Atom)
  static void do_abc_getprop(Interpreter* interp, CallStmt2* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getprop(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // abc_getpropx: (Effect, Name, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getpropx(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getpropx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // getpropertylate_u: (Effect, Uint, Atom~) -> (Effect, Atom)
  static void do_getpropertylate_u(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_getpropertylate_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // getpropertylate_i: (Effect, Int, Atom~) -> (Effect, Atom)
  static void do_getpropertylate_i(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_getpropertylate_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // getpropertylate_d: (Effect, Number, Atom~) -> (Effect, Atom)
  static void do_getpropertylate_d(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_getpropertylate_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        interp->getAtom(instr->use(2))));
  }

  // array_get_u: (Effect, Uint, Array~) -> (Effect, Atom)
  static void do_array_get_u(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_array_get_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (ArrayObject*)interp->getObject(instr->use(2))));
  }

  // array_get_i: (Effect, Int, Array~) -> (Effect, Atom)
  static void do_array_get_i(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_array_get_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (ArrayObject*)interp->getObject(instr->use(2))));
  }

  // array_get_d: (Effect, Number, Array~) -> (Effect, Atom)
  static void do_array_get_d(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_array_get_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (ArrayObject*)interp->getObject(instr->use(2))));
  }

  // vectorint_get_u: (Effect, Uint, VectorInt~) -> (Effect, Int)
  static void do_vectorint_get_u(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectorint_get_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (IntVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectorint_get_i: (Effect, Int, VectorInt~) -> (Effect, Int)
  static void do_vectorint_get_i(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectorint_get_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (IntVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectorint_get_d: (Effect, Number, VectorInt~) -> (Effect, Int)
  static void do_vectorint_get_d(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectorint_get_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (IntVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectoruint_get_u: (Effect, Uint, VectorUInt~) -> (Effect, Uint)
  static void do_vectoruint_get_u(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectoruint_get_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (UIntVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectoruint_get_i: (Effect, Int, VectorUInt~) -> (Effect, Uint)
  static void do_vectoruint_get_i(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectoruint_get_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (UIntVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectoruint_get_d: (Effect, Number, VectorUInt~) -> (Effect, Uint)
  static void do_vectoruint_get_d(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectoruint_get_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (UIntVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectordouble_get_u: (Effect, Uint, VectorDouble~) -> (Effect, Number)
  static void do_vectordouble_get_u(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectordouble_get_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (DoubleVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectordouble_get_i: (Effect, Int, VectorDouble~) -> (Effect, Number)
  static void do_vectordouble_get_i(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectordouble_get_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (DoubleVectorObject*)interp->getObject(instr->use(2))));
  }

  // vectordouble_get_d: (Effect, Number, VectorDouble~) -> (Effect, Number)
  static void do_vectordouble_get_d(Interpreter* interp, BinaryStmt* instr) {
    interp->resultVal(instr->value_out()) = Value(Stubs::do_vectordouble_get_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (DoubleVectorObject*)interp->getObject(instr->use(2))));
  }

  // abc_getpropns: (Effect, Name, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getpropns(Interpreter* interp, CallStmt3* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getpropns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3))));
  }

  // abc_getpropnsx: (Effect, Name, Atom, Atom, Atom~) -> (Effect, Atom)
  static void do_abc_getpropnsx(Interpreter* interp, CallStmt4* instr) {
    interp->resultVal(instr->value_out()) = AtomValue(Stubs::do_abc_getpropnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4))));
  }

  // abc_setprop: (Effect, Name, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setprop(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_abc_setprop(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // abc_setpropx: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setpropx(Interpreter* interp, CallStmt3* instr) {
    Stubs::do_abc_setpropx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)));
    (void)interp;
  }

  // setpropertylate_u: (Effect, Uint, Atom~, Atom) -> (Effect, Bot)
  static void do_setpropertylate_u(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_setpropertylate_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // setpropertylate_i: (Effect, Int, Atom~, Atom) -> (Effect, Bot)
  static void do_setpropertylate_i(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_setpropertylate_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // setpropertylate_d: (Effect, Number, Atom~, Atom) -> (Effect, Bot)
  static void do_setpropertylate_d(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_setpropertylate_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // array_set_u: (Effect, Uint, Array~, Atom) -> (Effect, Bot)
  static void do_array_set_u(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_array_set_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (ArrayObject*)interp->getObject(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // array_set_i: (Effect, Int, Array~, Atom) -> (Effect, Bot)
  static void do_array_set_i(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_array_set_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (ArrayObject*)interp->getObject(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // array_set_d: (Effect, Number, Array~, Atom) -> (Effect, Bot)
  static void do_array_set_d(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_array_set_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (ArrayObject*)interp->getObject(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // vectorint_set_u: (Effect, Uint, VectorInt~, Int) -> (Effect, Bot)
  static void do_vectorint_set_u(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectorint_set_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (IntVectorObject*)interp->getObject(instr->use(2)),
        interp->getInt(instr->use(3)));
    (void)interp;
  }

  // vectorint_set_i: (Effect, Int, VectorInt~, Int) -> (Effect, Bot)
  static void do_vectorint_set_i(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectorint_set_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (IntVectorObject*)interp->getObject(instr->use(2)),
        interp->getInt(instr->use(3)));
    (void)interp;
  }

  // vectorint_set_d: (Effect, Number, VectorInt~, Int) -> (Effect, Bot)
  static void do_vectorint_set_d(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectorint_set_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (IntVectorObject*)interp->getObject(instr->use(2)),
        interp->getInt(instr->use(3)));
    (void)interp;
  }

  // vectoruint_set_u: (Effect, Uint, VectorUInt~, Uint) -> (Effect, Bot)
  static void do_vectoruint_set_u(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectoruint_set_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (UIntVectorObject*)interp->getObject(instr->use(2)),
        interp->getUint(instr->use(3)));
    (void)interp;
  }

  // vectoruint_set_i: (Effect, Int, VectorUInt~, Uint) -> (Effect, Bot)
  static void do_vectoruint_set_i(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectoruint_set_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (UIntVectorObject*)interp->getObject(instr->use(2)),
        interp->getUint(instr->use(3)));
    (void)interp;
  }

  // vectoruint_set_d: (Effect, Number, VectorUInt~, Uint) -> (Effect, Bot)
  static void do_vectoruint_set_d(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectoruint_set_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (UIntVectorObject*)interp->getObject(instr->use(2)),
        interp->getUint(instr->use(3)));
    (void)interp;
  }

  // vectordouble_set_u: (Effect, Uint, VectorDouble~, Number) -> (Effect, Bot)
  static void do_vectordouble_set_u(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectordouble_set_u(&interp->frame_,
        interp->getUint(instr->use(1)),
        (DoubleVectorObject*)interp->getObject(instr->use(2)),
        interp->getDouble(instr->use(3)));
    (void)interp;
  }

  // vectordouble_set_i: (Effect, Int, VectorDouble~, Number) -> (Effect, Bot)
  static void do_vectordouble_set_i(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectordouble_set_i(&interp->frame_,
        interp->getInt(instr->use(1)),
        (DoubleVectorObject*)interp->getObject(instr->use(2)),
        interp->getDouble(instr->use(3)));
    (void)interp;
  }

  // vectordouble_set_d: (Effect, Number, VectorDouble~, Number) -> (Effect, Bot)
  static void do_vectordouble_set_d(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_vectordouble_set_d(&interp->frame_,
        interp->getDouble(instr->use(1)),
        (DoubleVectorObject*)interp->getObject(instr->use(2)),
        interp->getDouble(instr->use(3)));
    (void)interp;
  }

  // abc_setpropns: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setpropns(Interpreter* interp, CallStmt3* instr) {
    Stubs::do_abc_setpropns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)));
    (void)interp;
  }

  // abc_setpropnsx: (Effect, Name, Atom, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_setpropnsx(Interpreter* interp, CallStmt4* instr) {
    Stubs::do_abc_setpropnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)),
        interp->getAtom(instr->use(5)));
    (void)interp;
  }

  // abc_initprop: (Effect, Name, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_initprop(Interpreter* interp, CallStmt2* instr) {
    Stubs::do_abc_initprop(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)));
    (void)interp;
  }

  // abc_initpropx: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_initpropx(Interpreter* interp, CallStmt3* instr) {
    Stubs::do_abc_initpropx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)));
    (void)interp;
  }

  // abc_initpropns: (Effect, Name, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_initpropns(Interpreter* interp, CallStmt3* instr) {
    Stubs::do_abc_initpropns(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)));
    (void)interp;
  }

  // abc_initpropnsx: (Effect, Name, Atom, Atom, Atom~, Atom) -> (Effect, Bot)
  static void do_abc_initpropnsx(Interpreter* interp, CallStmt4* instr) {
    Stubs::do_abc_initpropnsx(&interp->frame_,
        interp->getName(instr->use(1)),
        interp->getAtom(instr->use(2)),
        interp->getAtom(instr->use(3)),
        interp->getAtom(instr->use(4)),
        interp->getAtom(instr->use(5)));
    (void)interp;
  }

};

const Interpreter::StubCall Interpreter::stub_table[] = {
  0, // start
  0, // template
  0, // catchblock
  0, // return
  (StubCall)&StubCaller::do_throw,
  0, // goto
  0, // label
  0, // if
  0, // switch
  0, // arm
  0, // const
  (StubCall)&StubCaller::do_coerce,
  (StubCall)&StubCaller::do_cast,
  (StubCall)&StubCaller::do_castobject,
  (StubCall)&StubCaller::do_tonumber,
  (StubCall)&StubCaller::do_toint,
  (StubCall)&StubCaller::do_touint,
  (StubCall)&StubCaller::do_toboolean,
  (StubCall)&StubCaller::do_d2b,
  (StubCall)&StubCaller::do_caststring,
  (StubCall)&StubCaller::do_castns,
  (StubCall)&StubCaller::do_cknull,
  (StubCall)&StubCaller::do_cknullobject,
  (StubCall)&StubCaller::do_cktimeout,
  (StubCall)&StubCaller::do_abc_hasnext,
  0, // abc_hasnext2
  (StubCall)&StubCaller::do_never,
  (StubCall)&StubCaller::do_call,
  (StubCall)&StubCaller::do_construct,
  (StubCall)&StubCaller::do_constructsuper,
  (StubCall)&StubCaller::do_loadenv_namespace,
  (StubCall)&StubCaller::do_loadenv_boolean,
  (StubCall)&StubCaller::do_loadenv_number,
  (StubCall)&StubCaller::do_loadenv_string,
  (StubCall)&StubCaller::do_loadenv_interface,
  (StubCall)&StubCaller::do_loadenv,
  (StubCall)&StubCaller::do_loadenv_atom,
  (StubCall)&StubCaller::do_loadinitenv,
  (StubCall)&StubCaller::do_loadsuperinitenv,
  (StubCall)&StubCaller::do_loadenv_env,
  (StubCall)&StubCaller::do_newobject,
  (StubCall)&StubCaller::do_newarray,
  (StubCall)&StubCaller::do_applytype,
  (StubCall)&StubCaller::do_newinstance,
  (StubCall)&StubCaller::do_abc_convert_s,
  (StubCall)&StubCaller::do_abc_esc_xelem,
  (StubCall)&StubCaller::do_abc_esc_xattr,
  (StubCall)&StubCaller::do_abc_typeof,
  0, // speculate_int
  0, // speculate_number
  0, // speculate_numeric
  0, // speculate_string
  0, // speculate_object
  0, // speculate_array
  0, // speculate_bool
  (StubCall)&StubCaller::do_ckfilter,
  (StubCall)&StubCaller::do_abc_add,
  (StubCall)&StubCaller::do_addd,
  (StubCall)&StubCaller::do_concat_strings,
  (StubCall)&StubCaller::do_abc_nextname,
  (StubCall)&StubCaller::do_abc_nextvalue,
  (StubCall)&StubCaller::do_lessthan,
  (StubCall)&StubCaller::do_lessequals,
  (StubCall)&StubCaller::do_greaterthan,
  (StubCall)&StubCaller::do_greaterequals,
  (StubCall)&StubCaller::do_abc_instanceof,
  (StubCall)&StubCaller::do_abc_istype,
  (StubCall)&StubCaller::do_abc_istypelate,
  (StubCall)&StubCaller::do_abc_astype,
  (StubCall)&StubCaller::do_abc_astypelate,
  (StubCall)&StubCaller::do_abc_in,
  (StubCall)&StubCaller::do_divd,
  (StubCall)&StubCaller::do_modulo,
  (StubCall)&StubCaller::do_subd,
  (StubCall)&StubCaller::do_muld,
  (StubCall)&StubCaller::do_addi,
  (StubCall)&StubCaller::do_subi,
  (StubCall)&StubCaller::do_muli,
  (StubCall)&StubCaller::do_ori,
  (StubCall)&StubCaller::do_andi,
  (StubCall)&StubCaller::do_xori,
  (StubCall)&StubCaller::do_lshi,
  (StubCall)&StubCaller::do_rshi,
  (StubCall)&StubCaller::do_rshui,
  (StubCall)&StubCaller::do_noti,
  (StubCall)&StubCaller::do_negi,
  (StubCall)&StubCaller::do_negd,
  (StubCall)&StubCaller::do_not,
  (StubCall)&StubCaller::do_newactivation,
  (StubCall)&StubCaller::do_abc_finddef,
  (StubCall)&StubCaller::do_abc_findpropstrict,
  (StubCall)&StubCaller::do_abc_findpropstrictx,
  (StubCall)&StubCaller::do_abc_findpropstrictns,
  (StubCall)&StubCaller::do_abc_findpropstrictnsx,
  (StubCall)&StubCaller::do_abc_findproperty,
  (StubCall)&StubCaller::do_abc_findpropertyx,
  (StubCall)&StubCaller::do_abc_findpropertyns,
  (StubCall)&StubCaller::do_abc_findpropertynsx,
  (StubCall)&StubCaller::do_newclass,
  (StubCall)&StubCaller::do_newfunction,
  (StubCall)&StubCaller::do_abc_getsuper,
  (StubCall)&StubCaller::do_abc_getsuperx,
  (StubCall)&StubCaller::do_abc_getsuperns,
  (StubCall)&StubCaller::do_abc_getsupernsx,
  (StubCall)&StubCaller::do_abc_getdescendants,
  (StubCall)&StubCaller::do_abc_getdescendantsx,
  (StubCall)&StubCaller::do_abc_getdescendantsns,
  (StubCall)&StubCaller::do_abc_getdescendantsnsx,
  (StubCall)&StubCaller::do_abc_callprop,
  (StubCall)&StubCaller::do_abc_callpropx,
  (StubCall)&StubCaller::do_abc_callpropns,
  (StubCall)&StubCaller::do_abc_callpropnsx,
  (StubCall)&StubCaller::do_abc_callproplex,
  (StubCall)&StubCaller::do_abc_callproplexx,
  (StubCall)&StubCaller::do_abc_callproplexns,
  (StubCall)&StubCaller::do_abc_callproplexnsx,
  (StubCall)&StubCaller::do_abc_constructprop,
  (StubCall)&StubCaller::do_abc_constructpropx,
  (StubCall)&StubCaller::do_abc_constructpropns,
  (StubCall)&StubCaller::do_abc_constructpropnsx,
  (StubCall)&StubCaller::do_abc_callsuper,
  (StubCall)&StubCaller::do_abc_callsuperx,
  (StubCall)&StubCaller::do_abc_callsuperns,
  (StubCall)&StubCaller::do_abc_callsupernsx,
  0, // callstatic
  0, // callmethod
  0, // callinterface
  (StubCall)&StubCaller::do_newcatch,
  0, // setslot
  0, // getslot
  (StubCall)&StubCaller::do_slottype,
  (StubCall)&StubCaller::do_getouterscope,
  0, // safepoint
  0, // setlocal
  0, // newstate
  0, // deopt_safepoint
  (StubCall)&StubCaller::do_deopt_finish,
  0, // deopt_finishcall
  (StubCall)&StubCaller::do_debugline,
  (StubCall)&StubCaller::do_debugfile,
  (StubCall)&StubCaller::do_string2atom,
  (StubCall)&StubCaller::do_double2atom,
  (StubCall)&StubCaller::do_int2atom,
  (StubCall)&StubCaller::do_uint2atom,
  (StubCall)&StubCaller::do_scriptobject2atom,
  (StubCall)&StubCaller::do_bool2atom,
  (StubCall)&StubCaller::do_ns2atom,
  (StubCall)&StubCaller::do_atom2bool,
  (StubCall)&StubCaller::do_atom2double,
  (StubCall)&StubCaller::do_atom2string,
  (StubCall)&StubCaller::do_atom2int,
  (StubCall)&StubCaller::do_atom2uint,
  (StubCall)&StubCaller::do_atom2scriptobject,
  (StubCall)&StubCaller::do_atom2ns,
  (StubCall)&StubCaller::do_i2d,
  (StubCall)&StubCaller::do_u2d,
  (StubCall)&StubCaller::do_d2i,
  (StubCall)&StubCaller::do_d2u,
  (StubCall)&StubCaller::do_toslot,
  (StubCall)&StubCaller::do_toprimitive,
  (StubCall)&StubCaller::do_eqi,
  (StubCall)&StubCaller::do_lti,
  (StubCall)&StubCaller::do_lei,
  (StubCall)&StubCaller::do_gti,
  (StubCall)&StubCaller::do_gei,
  (StubCall)&StubCaller::do_eqd,
  (StubCall)&StubCaller::do_ltd,
  (StubCall)&StubCaller::do_led,
  (StubCall)&StubCaller::do_gtd,
  (StubCall)&StubCaller::do_ged,
  (StubCall)&StubCaller::do_equi,
  (StubCall)&StubCaller::do_ltui,
  (StubCall)&StubCaller::do_leui,
  (StubCall)&StubCaller::do_gtui,
  (StubCall)&StubCaller::do_geui,
  (StubCall)&StubCaller::do_eqb,
  (StubCall)&StubCaller::do_doubletoint32,
  (StubCall)&StubCaller::do_i2u,
  (StubCall)&StubCaller::do_u2i,
  (StubCall)&StubCaller::do_abc_dxnslate,
  (StubCall)&StubCaller::do_abc_dxns,
  (StubCall)&StubCaller::do_li8,
  (StubCall)&StubCaller::do_li16,
  (StubCall)&StubCaller::do_li32,
  (StubCall)&StubCaller::do_lf32,
  (StubCall)&StubCaller::do_lf64,
  (StubCall)&StubCaller::do_si8,
  (StubCall)&StubCaller::do_si16,
  (StubCall)&StubCaller::do_si32,
  (StubCall)&StubCaller::do_sf32,
  (StubCall)&StubCaller::do_sf64,
  (StubCall)&StubCaller::do_abc_equals,
  (StubCall)&StubCaller::do_eqp,
  (StubCall)&StubCaller::do_eqs,
  (StubCall)&StubCaller::do_abc_strictequals,
  (StubCall)&StubCaller::do_abc_setsuper,
  (StubCall)&StubCaller::do_abc_setsuperx,
  (StubCall)&StubCaller::do_abc_setsuperns,
  (StubCall)&StubCaller::do_abc_setsupernsx,
  (StubCall)&StubCaller::do_abc_deleteprop,
  (StubCall)&StubCaller::do_abc_deletepropx,
  (StubCall)&StubCaller::do_abc_deletepropns,
  (StubCall)&StubCaller::do_abc_deletepropnsx,
  (StubCall)&StubCaller::do_abc_getprop,
  (StubCall)&StubCaller::do_abc_getpropx,
  (StubCall)&StubCaller::do_getpropertylate_u,
  (StubCall)&StubCaller::do_getpropertylate_i,
  (StubCall)&StubCaller::do_getpropertylate_d,
  (StubCall)&StubCaller::do_array_get_u,
  (StubCall)&StubCaller::do_array_get_i,
  (StubCall)&StubCaller::do_array_get_d,
  (StubCall)&StubCaller::do_vectorint_get_u,
  (StubCall)&StubCaller::do_vectorint_get_i,
  (StubCall)&StubCaller::do_vectorint_get_d,
  (StubCall)&StubCaller::do_vectoruint_get_u,
  (StubCall)&StubCaller::do_vectoruint_get_i,
  (StubCall)&StubCaller::do_vectoruint_get_d,
  (StubCall)&StubCaller::do_vectordouble_get_u,
  (StubCall)&StubCaller::do_vectordouble_get_i,
  (StubCall)&StubCaller::do_vectordouble_get_d,
  (StubCall)&StubCaller::do_abc_getpropns,
  (StubCall)&StubCaller::do_abc_getpropnsx,
  (StubCall)&StubCaller::do_abc_setprop,
  (StubCall)&StubCaller::do_abc_setpropx,
  (StubCall)&StubCaller::do_setpropertylate_u,
  (StubCall)&StubCaller::do_setpropertylate_i,
  (StubCall)&StubCaller::do_setpropertylate_d,
  (StubCall)&StubCaller::do_array_set_u,
  (StubCall)&StubCaller::do_array_set_i,
  (StubCall)&StubCaller::do_array_set_d,
  (StubCall)&StubCaller::do_vectorint_set_u,
  (StubCall)&StubCaller::do_vectorint_set_i,
  (StubCall)&StubCaller::do_vectorint_set_d,
  (StubCall)&StubCaller::do_vectoruint_set_u,
  (StubCall)&StubCaller::do_vectoruint_set_i,
  (StubCall)&StubCaller::do_vectoruint_set_d,
  (StubCall)&StubCaller::do_vectordouble_set_u,
  (StubCall)&StubCaller::do_vectordouble_set_i,
  (StubCall)&StubCaller::do_vectordouble_set_d,
  (StubCall)&StubCaller::do_abc_setpropns,
  (StubCall)&StubCaller::do_abc_setpropnsx,
  (StubCall)&StubCaller::do_abc_initprop,
  (StubCall)&StubCaller::do_abc_initpropx,
  (StubCall)&StubCaller::do_abc_initpropns,
  (StubCall)&StubCaller::do_abc_initpropnsx,
};

}
