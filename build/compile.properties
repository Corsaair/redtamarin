################################################################################################################################
#
# This file define the default AVM FEATURES AND TWEAKS
#
# see:
# /core/avmfeatures.as
# /build/avmfeatures.py
# /shell/avmshell-features.h
#
# special cases:
# 
# PATH are not covered but we provide all sources anyway
# eg. you can't change the zlib path but the zlib is provided in source
# 
# UNDOCUMENTED was not documented and find about it by try/luck/hasard ;)
# 
# TWEAK VM adjustments for various oddities
# 
# VERSIONING to support API versioning
# 
# ALWAYS ENABLED don't touch this we need it, if you disable it you are on your own
#
################################################################################################################################


################################################################################################################################
#
# Supported in the ANT build
# by default we use /shell/avmshell-features.h for all the features we want enabled in redtamarin
# but we supports options to activate/desactivate some of them in our build
#
################################################################################################################################

# ALWAYS ENABLED
# build.options.tamarin.enabled = false
# build.options.tamarin.flag    = --enable-tamarin

# ALWAYS ENABLED
# build.options.shell.enabled = false
# build.options.shell.flag    = --enable-shell

# SELECTED IN TARGET
# build.options.debug.enabled = false
# build.options.debug.flag    = --enable-debug

# SELECTED IN TARGET
# build.options.debugger.enabled = false
# build.options.debugger.flag    = --enable-debugger

# UNDOCUMENTED
# Optional avm description string
# avmplus: -DAVMPLUS_DESC
# see: app.desc
# redtamarin: we want/need to be able to tag the executable with a description
build.options.desc.enabled = true
build.options.desc.flag    = --enable-desc=

# Select support for the AS3 run-time compiler.
# NOT RECOMMENDED.
# The run-time compiler is still undergoing development.
# avmplus: -DAVMFEATURE_EVAL
# redtamarin: we want to support eval()
build.options.eval.enabled = true
build.options.eval.flag    = --enable-eval

# Enables the types 'float' and 'float4' in the VM.
# avmplus: -DAVMFEATURE_FLOAT
# redtamarin: we may want to support types float/float in AS3
build.options.float.enabled = false
build.options.float.flag    = --enable-float

# redtamarin: we do want to support versioning all the time

# VERSIONING
# Enabling this will support SWF12 / ABC version 47.12 / FP 10.3 / AIR 2.7
# avmplus: -DAVMFEATURE_SWF12
build.options.swf12.enabled = true
build.options.swf12.flag    = --enable-swf12

# VERSIONING
# Enabling this will support SWF13 / ABC version 47.13 / FP 11.0 / AIR 3.0
# avmplus: -DAVMFEATURE_SWF13
build.options.swf13.enabled = true
build.options.swf13.flag    = --enable-swf13

# VERSIONING
# Enabling this will support SWF14 / ABC version 47.14 / FP 11.1 / AIR 3.1
# avmplus: -DAVMFEATURE_SWF14
build.options.swf14.enabled = true
build.options.swf14.flag    = --enable-swf14

# VERSIONING
# Enabling this will support SWF15 / ABC version 47.15 / FP 11.2 / AIR 3.2
# avmplus: -DAVMFEATURE_SWF15
build.options.swf15.enabled = true
build.options.swf15.flag    = --enable-swf15

# VERSIONING
# Enabling this will support SWF16 / ABC version 47.16 / FP 11.3 / AIR 3.3
# avmplus: -DAVMFEATURE_SWF16
build.options.swf16.enabled = true
build.options.swf16.flag    = --enable-swf16

# VERSIONING
# Enabling this will support SWF17 / ABC version 47.17 / FP 11.4 / AIR 3.4
# avmplus: -DAVMFEATURE_SWF17
build.options.swf17.enabled = true
build.options.swf17.flag    = --enable-swf17

# VERSIONING
# Enabling this will support SWF18 / ABC version 47.18 / FP 11.5 / AIR 3.5
# avmplus: -DAVMFEATURE_SWF18
build.options.swf18.enabled = true
build.options.swf18.flag    = --enable-swf18

# VERSIONING
# Enabling this will support SWF19 / ABC version 47.19 / FP 11.6 / AIR 3.6
# avmplus: -DAVMFEATURE_SWF19
build.options.swf19.enabled = true
build.options.swf19.flag    = --enable-swf19

# VERSIONING
# Enabling this will support SWF20 / ABC version 47.20 / FP 11.7 / AIR 3.7
# avmplus: -DAVMFEATURE_SWF20
# redtamarin: will be supported in a near future
build.options.swf20.enabled = false
build.options.swf20.flag    = --enable-swf20

# VERSIONING
# Enabling this will support SWF21 / ABC version 47.21 / FP 11.8 / AIR 3.8
# avmplus: -DAVMFEATURE_SWF21
# redtamarin: will be supported in a near future
build.options.swf21.enabled = false
build.options.swf21.flag    = --enable-swf21

# TODO add more VERSIONING later to support till AIR 4.0/FP 12.0

################################################################################################################################
# 
# NOT SUPPORTED IN THE ANT BUILD / COMMENTED OUT
# we keep it here in case we need/want to support it in the future
# 
################################################################################################################################

# PATH
# build.options.sys-root-dir.enabled = false
# build.options.sys-root-dir.flag    = --enable-sys-root-dir

# PATH
# build.options.lzma-lib.enabled = false
# build.options.lzma-lib.flag    = --enable-lzma-lib

# PATH
# build.options.zlib-include-dir.enabled = false
# build.options.zlib-include-dir.flag    = --enable-zlib-include-dir

# PATH
# build.options.zlib-lib.enabled = false
# build.options.zlib-lib.flag    = --enable-zlib-lib


# Selects the ABC interpreter.
# Appropriate for platforms that run the interpreter only for initialization code
# and for platforms that are exceptionally memory-constrained.
# avmplus: -DAVMFEATURE_ABC_INTERP
# build.options.abc-interp.enabled = false
# build.options.abc-interp.flag    = --enable-abc-interp

# Enable the sample-based memory profiler.
# avmplus: -DAVMFEATURE_ALLOCATION_SAMPLER
# build.options.allocation-sampler.enabled = false
# build.options.allocation-sampler.flag    = --enable-allocation-sampler

# Enables the ahead-of-time compiler.
# avmplus: -DAVMFEATURE_AOT
# build.options.aot.enabled = false
# build.options.aot.flag    = --enable-aot

# build.options.arm-fpu.enabled = false
# build.options.arm-fpu.flag    = --enable-arm-fpu

# build.options.arm-hard-float.enabled = false
# build.options.arm-hard-float.flag    = --enable-arm-hard-float

# build.options.arm-neon.enabled = false
# build.options.arm-neon.flag    = --enable-arm-neon

# build.options.arm-thumb.enabled = false
# build.options.arm-thumb.flag    = --enable-arm-thumb

# Enables the exception based caching code,
# right now this is used exclusively by AOT.
# avmplus: -DAVMFEATURE_BUFFER_GUARD
# build.options.buffer-guard.enabled = false
# build.options.buffer-guard.flag    = --enable-buffer-guard

# Enabling this will cache the result of getQualifiedClassName,
# making it run much more quickly,
# at the expense of more memory usage.
# avmplus: -DAVMFEATURE_CACHE_GQCN
# build.options.cache-gqcn.enabled = false
# build.options.cache-gqcn.flag    = --enable-cache-gqcn

# Allows the default JIT compilation policy to be overriden with alternate rules.
# avmplus: -DAVMFEATURE_COMPILEPOLICY
# build.options.compilepolicy.enabled = false
# build.options.compilepolicy.flag    = --enable-compilepolicy

# Support C++ exceptions in the MMgc API.
# avmplus: -DAVMFEATURE_CPP_EXCEPTIONS
# build.options.cpp-exceptions.enabled = false
# build.options.cpp-exceptions.flag    = --enable-cpp-exceptions

# This is used to compile AVM with the debugger API enabled,
# but certain bits of functionality reduced to no-ops.
# avmplus: -DAVMFEATURE_DEBUGGER_STUB
# build.options.debugger-stub.enabled = false
# build.options.debugger-stub.flag    = --enable-debugger-stub

# Enables the Halfmoon optimizing just-in-time compiler.
# avmplus: -DAVMFEATURE_HALFMOON
# build.options.halfmoon.enabled = false
# build.options.halfmoon.flag    = --enable-halfmoon

# If enabled then always divert avmStackAlloc() to a separately managed stack,
# to avoid blowing the stack on small systems or to support systems that
# don't provide alloca().
# If disabled then smallish allocations are handled by the built-in alloca()
# (which must be provided) and larger allocations are handled by diverting to a separately managed stack;
# the latter case is mainly a security issue, as alloca() will do strange things if given sufficiently large requests.
# avmplus: -DAVMFEATURE_HEAP_ALLOCA
# build.options.heap-alloca.enabled = false
# build.options.heap-alloca.flag    = --enable-heap-alloca

# Recognize a pointer or pointer-like value into anywhere in an object as referencing
# that object during marking in the garbage collector.
# 
# Enabling this tends to be increase GC cost but it can be a useful debugging aid.
# avmplus: -DAVMFEATURE_INTERIOR_POINTERS
# build.options.interior-pointers.enabled = false
# build.options.interior-pointers.flag    = --enable-interior-pointers

# Enables local returns and safepoint polling from interrupt checks
# avmplus: -DAVMFEATURE_INTERRUPT_SAFEPOINT_POLL
# build.options.interrupt-safepoint-poll.enabled = false
# build.options.interrupt-safepoint-poll.flag    = --enable-interrupt-safepoint-poll

# Enables the just-in-time compiler.
# This will typically increase performance significantly
# but may result in significantly higher memory consumption.
# avmplus: -DAVMFEATURE_JIT
# build.options.jit.enabled = false
# build.options.jit.flag    = --enable-jit

# Enabling this will compile in code to enable memory profiling.
# (Must still be enabled at runtime.)
# avmplus: -DAVMFEATURE_MEMORY_PROFILER
# build.options.memory-profiler.enabled = false
# build.options.memory-profiler.flag    = --enable-memory-profiler

# build.options.methodenv-impl32.enabled = false
# build.options.methodenv-impl32.flag    = --enable-methodenv-impl32

# build.options.mmgc-interior-pointers.enabled = false
# build.options.mmgc-interior-pointers.flag    = --enable-mmgc-interior-pointers

# build.options.mmgc-shared.enabled = false
# build.options.mmgc-shared.flag    = --enable-mmgc-shared

# build.options.optimize.enabled = false
# build.options.optimize.flag    = --enable-optimize

# Enables delayed JIT-compilation with on-stack replacement, by default,
# and supports runtime-disabling of OSR to get the legacy policy (OSR=0).
# Without this feature, legacy policy is the default: the VM
# compiles a method eagerly or interprets it always, and the OSR
# invocation threshold can be enabled at runtime (OSR=K, K>0).
# avmplus: -DAVMFEATURE_OSR
# build.options.osr.enabled = false
# build.options.osr.flag    = --enable-osr

# Enabling this will cause the mmfx_* memory macros to use global new/delete.
# avmplus: -DAVMFEATURE_OVERRIDE_GLOBAL_NEW
# build.options.override-global-new.enabled = false
# build.options.override-global-new.flag    = --enable-override-global-new

# build.options.perfm.enabled = false
# build.options.perfm.flag    = --enable-perfm

# Makes all JIT code buffers read-only whenever JIT code is executing,
# to reduce the probability of heap overflow attacks.
# avmplus: -DAVMFEATURE_PROTECT_JITMEM
# build.options.protect-jitmem.enabled = false
# build.options.protect-jitmem.flag    = --enable-protect-jitmem

# Enables safepoints and the mechanism to dispatch SafepointTasks
# avmplus: -DAVMFEATURE_SAFEPOINTS
# build.options.safepoints.enabled = false
# build.options.safepoints.flag    = --enable-safepoints

# Enables the built-in selftests.
# These can be run by -Dselftest at the shell
# or by calling the global function avmplus::selftests(), see extensions/Selftest.h.
# Mostly they are useful for AVM development, not for embedders.
# Apart from code size considerations this can be enabled for release builds.
# avmplus: -DAVMFEATURE_SELFTEST
# build.options.selftest.enabled = false
# build.options.selftest.flag    = --enable-selftest

# Selects locking around calls to the memory block manager (GCHeap),
# allowing multiple threads to share the block manager.
# Any client with more than one thread that uses MMgc either for garbage collected
# or manually managed memory wants this;
# the Flash Player requires it.
# avmplus: -DAVMFEATURE_SHARED_GCHEAP
# build.options.shared-gcheap.enabled = true
# build.options.shared-gcheap.flag    = --enable-shared-gcheap

# Select support for Telemetry
# (only interface for now; to be used in player)
# avmplus: -DAVMFEATURE_TELEMETRY
# build.options.telemetry.enabled = false
# build.options.telemetry.flag    = --enable-telemetry

# Select support for Telemetry based sampler,
# requires a Telemetry implementation (to be used in host)
# avmplus: -DAVMFEATURE_TELEMETRY_SAMPLER
# build.options.telemetry-sampler.enabled = false
# build.options.telemetry-sampler.flag    = --enable-telemetry-sampler

# Selects the faster, direct threaded wordcode interpreter.
# avmplus: -DAVMFEATURE_THREADED_INTERP
# build.options.threaded-interp.enabled = false
# build.options.threaded-interp.flag    = --enable-threaded-interp

# Make MMgc's overridden global new and delete operators delegate allocation and
# deallocation to VMPI_alloc and VMPI_free instead of going to FixedMalloc.
# avmplus: -DAVMFEATURE_USE_SYSTEM_MALLOC
# build.options.use-system-malloc.enabled = false
# build.options.use-system-malloc.flag    = --enable-use-system-malloc

# Selects the wordcode interpreter.
# avmplus: -DAVMFEATURE_WORDCODE_INTERP
# build.options.wordcode-interp.enabled = false
# build.options.wordcode-interp.flag    = --enable-wordcode-interp



# Selects Shark profiling of jit'd code.  MacOS 10.6.
# This technique should work for oprofile on linux and/or android, with more tweaks.
# See README in utils/sharkprof.
# avmplus: -DAVMFEATURE_SHARK
# build.options.shark.enabled = false
# build.options.shark.flag    = --enable-shark

# Enabling this will compile in code to tell valgrind about how MMgc allocates memory.
# avmplus: -DAVMFEATURE_VALGRIND
# build.options.valgrind.enabled = false
# build.options.valgrind.flag    = --enable-valgrind

# Selects VTune profiling of jit'd code.
# avmplus: -DAVMFEATURE_VTUNE
# build.options.vtune.enabled = false
# build.options.vtune.flag    = --enable-vtune



# TWEAK
# The current (June 2010) EPOC/Symbian emulator has certain limitations,
# described throughout the code where this tweak is used.
# avmplus: -DAVMTWEAK_EPOC_EMULATOR
# build.options.epoc-emulator.enabled = false
# build.options.epoc-emulator.flag    = --enable-epoc-emulator

# TWEAK
# Compile-time selected exact tracing
# avmplus: -DAVMTWEAK_EXACT_TRACING
# build.options.exact-tracing.enabled = false
# build.options.exact-tracing.flag    = --enable-exact-tracing

# TWEAK
# Heap graph, enables blacklist feature for inspecting object reachability.
# avmplus: -DAVMTWEAK_HEAP_GRAPH
# build.options.heap-graph.enabled = false
# build.options.heap-graph.flag    = --enable-heap-graph

# TWEAK
# Run-time selectable exact tracing, for experimentation
# avmplus: -DAVMTWEAK_SELECTABLE_EXACT_TRACING
# build.options.selectable-exact-tracing.enabled = false
# build.options.selectable-exact-tracing.flag    = --enable-selectable-exact-tracing

# TWEAK
# Various iphone SDK versions - at least - botch sin() and cos() around NaN and infinity.
# See https://bugzilla.mozilla.org/show_bug.cgi?id=556149.
# avmplus: -DAVMTWEAK_SIN_COS_NONFINITE
# build.options.sin-cos-nonfinite.enabled = false
# build.options.sin-cos-nonfinite.flag    = --enable-sin-cos-nonfinite

