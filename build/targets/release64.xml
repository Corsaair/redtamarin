<project name="redtamarin-compile-release64">

	<target name="before">

		<!-- convert path for cygwin -->
		<path id="basedir.path">
		    <pathelement path="${basedir}" />
		</path>
        <pathconvert targetos="unix" property="basedir.cygwin" refid="basedir.path">
        	<map from="C:" to="/cygdrive/c"/>
        </pathconvert>
        <pathconvert targetos="unix" property="basedir.unix" refid="basedir.path" />

        <!-- debug -->
        <!-- <echo message="${basedir}" /> -->
        <!-- <echo message="${basedir.cygwin}" /> -->
        <!-- <echo message="${basedir.unix}" /> -->
        
		<if>
			<and>
			<equals arg1="${build.cleanGenerated}" arg2="true"/>
			<available file="${target.release64.path}" type="dir"/>
			</and>
			<then>
				<delete dir="${target.release64.path}"/>
			</then>
		</if>
		
		<!-- create objdir compilation folder if not found -->
		<if>
			<not>
			<available file="${target.release64.path}" type="dir"/>
			</not>
			<then>
				<mkdir dir="${target.release64.path}"/>
			</then>
		</if>

		<!-- make file flags -->
    	<var name="flags" value="--target=x86_64-${TARGET_OS}" />

    	

        <if>
            <equals arg1="${build.showoptions}" arg2="true"/>
        <then>
            <echo message="release64 flags:"/>
            <!-- <echo message="${commandline}"/> -->
            <for list="${flags}" delimiter=" " param = "flag">
                <sequential>
                <echo message = "@{flag}"/>
                </sequential>
            </for>

        </then>
        </if>
        <var name="commandline" value="${commandline} ${flags}" />

		<!-- generate make file if not found -->
		<if>
			<not>
			<available file="${target.release64.path}/Makefile" type="file"/>
		</not>
			<then>
		        <exec executable="python" dir="${target.release64.path}" failonerror="true">
		            <arg line="${commandline}"/>
		        </exec>
			</then>
		</if>

	</target>

	<target name="compile-release64" depends="before,compile,after">
	</target>

	<target name="compile">
       	
       	<if>
            <equals arg1="${build.cleanGenerated}" arg2="true"/>
        <then>

			<delete>
				<fileset dir="${basedir.unix}/src/generated" includes="**/*.h"/>
				<fileset dir="${basedir.unix}/src/generated" includes="**/*.hh"/>
				<fileset dir="${basedir.unix}/src/generated" includes="**/*.cpp"/>
			</delete>

			<exec executable="make" dir="${target.release64.path}" failonerror="true">
				<env key="ASC" value="${basedir.unix}/${ASC1}"/>
				<env key="AVM" value="${basedir.unix}/${AVMSHELL_EXE}"/>
				<env key="AVMSHELL_TOOL" value="${basedir.unix}/${AVMSHELL_EXE}"/>
			</exec>

        </then>
        <else>
        	<exec executable="make" dir="${target.release64.path}" failonerror="true" />
        </else>
        </if>

	</target>

	<target name="after">

		<!-- create output folder if not found -->
		<if>
			<not>
			<available file="${app.release}/${SDK_OS}/${target.release64.output}" type="dir"/>
			</not>
			<then>
				<mkdir dir="${app.release}/${SDK_OS}/${target.release64.output}"/>
			</then>
		</if>

		<!-- move and rename avmshell -->
		<copy file="${target.release64.path}/shell/${AVMSHELL}" tofile="${app.release}/${SDK_OS}/${target.release64.output}/${TARGET}"/>

		<!-- executable bit -->
		<chmod file="${app.release}/${SDK_OS}/${target.release64.output}/${TARGET}" perm="+x"/>

	</target>

</project>